
incrediplotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000912c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08009238  08009238  0000a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009328  08009328  0000b1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009328  08009328  0000a328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009330  08009330  0000b1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009330  08009330  0000a330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009334  08009334  0000a334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08009338  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001404  200001cc  08009504  0000b1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  08009504  0000b5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118f6  00000000  00000000  0000b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033cc  00000000  00000000  0001caeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5d  00000000  00000000  00020f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a747  00000000  00000000  00021b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ba5  00000000  00000000  0003c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d48f  00000000  00000000  00050e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de2e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  000de32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e2a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009220 	.word	0x08009220

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08009220 	.word	0x08009220

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b2d      	ldr	r3, [pc, #180]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2c      	ldr	r2, [pc, #176]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2a      	ldr	r3, [pc, #168]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b27      	ldr	r3, [pc, #156]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a26      	ldr	r2, [pc, #152]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b24      	ldr	r3, [pc, #144]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b21      	ldr	r3, [pc, #132]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a20      	ldr	r2, [pc, #128]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, X_STEP_Pin|X_DIR_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2106      	movs	r1, #6
 80001bc:	481b      	ldr	r0, [pc, #108]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001be:	f000 ff03 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y_DIR_Pin|Y_STEP_Pin|LED_Pin, GPIO_PIN_RESET);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2107      	movs	r1, #7
 80001c6:	481a      	ldr	r0, [pc, #104]	@ (8000230 <MX_GPIO_Init+0xd4>)
 80001c8:	f000 fefe 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X_STEP_Pin X_DIR_Pin */
  GPIO_InitStruct.Pin = X_STEP_Pin|X_DIR_Pin;
 80001cc:	2306      	movs	r3, #6
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d0:	2301      	movs	r3, #1
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d8:	2302      	movs	r3, #2
 80001da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001dc:	f107 0310 	add.w	r3, r7, #16
 80001e0:	4619      	mov	r1, r3
 80001e2:	4812      	ldr	r0, [pc, #72]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001e4:	f000 fd6c 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_DIR_Pin Y_STEP_Pin LED_Pin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|Y_STEP_Pin|LED_Pin;
 80001e8:	2307      	movs	r3, #7
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	480c      	ldr	r0, [pc, #48]	@ (8000230 <MX_GPIO_Init+0xd4>)
 8000200:	f000 fd5e 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_LIM_Pin X_LIM_Pin */
  GPIO_InitStruct.Pin = Y_LIM_Pin|X_LIM_Pin;
 8000204:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020e:	2300      	movs	r3, #0
 8000210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	4805      	ldr	r0, [pc, #20]	@ (8000230 <MX_GPIO_Init+0xd4>)
 800021a:	f000 fd51 	bl	8000cc0 <HAL_GPIO_Init>

}
 800021e:	bf00      	nop
 8000220:	3720      	adds	r7, #32
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000
 800022c:	40010800 	.word	0x40010800
 8000230:	40010c00 	.word	0x40010c00

08000234 <USB_DEVICE_MasterHardReset>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_DEVICE_MasterHardReset(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800023a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800023e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000240:	2301      	movs	r3, #1
 8000242:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000244:	2302      	movs	r3, #2
 8000246:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000248:	2303      	movs	r3, #3
 800024a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800024c:	463b      	mov	r3, r7
 800024e:	4619      	mov	r1, r3
 8000250:	4808      	ldr	r0, [pc, #32]	@ (8000274 <USB_DEVICE_MasterHardReset+0x40>)
 8000252:	f000 fd35 	bl	8000cc0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800025c:	4805      	ldr	r0, [pc, #20]	@ (8000274 <USB_DEVICE_MasterHardReset+0x40>)
 800025e:	f000 feb3 	bl	8000fc8 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000262:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000266:	f000 fbf9 	bl	8000a5c <HAL_Delay>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800

08000278 <VCP_ReadChar>:

// VCP = virtual com port
int VCP_ReadChar(uint8_t *pChar)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  if (VCP_RxReadIndex != VCP_RxWriteIndex) // Check if buffer is not empty
 8000280:	4b0d      	ldr	r3, [pc, #52]	@ (80002b8 <VCP_ReadChar+0x40>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b0d      	ldr	r3, [pc, #52]	@ (80002bc <VCP_ReadChar+0x44>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d00f      	beq.n	80002ac <VCP_ReadChar+0x34>
  {
    *pChar = VCP_RxBuffer[VCP_RxReadIndex];
 800028c:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <VCP_ReadChar+0x40>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0b      	ldr	r2, [pc, #44]	@ (80002c0 <VCP_ReadChar+0x48>)
 8000292:	5cd3      	ldrb	r3, [r2, r3]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	701a      	strb	r2, [r3, #0]
    VCP_RxReadIndex = (VCP_RxReadIndex + 1) % VCP_RX_BUFFER_SIZE;
 800029a:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <VCP_ReadChar+0x40>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <VCP_ReadChar+0x40>)
 80002a6:	6013      	str	r3, [r2, #0]
    return 1; // Character read successfully
 80002a8:	2301      	movs	r3, #1
 80002aa:	e000      	b.n	80002ae <VCP_ReadChar+0x36>
  }
  return 0; // Buffer is empty
 80002ac:	2300      	movs	r3, #0
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	2000020c 	.word	0x2000020c
 80002bc:	20000208 	.word	0x20000208
 80002c0:	200001e8 	.word	0x200001e8

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b5b0      	push	{r4, r5, r7, lr}
 80002c6:	b092      	sub	sp, #72	@ 0x48
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ca:	f000 fb65 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ce:	f000 f869 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d2:	f7ff ff43 	bl	800015c <MX_GPIO_Init>
  USB_DEVICE_MasterHardReset();
 80002d6:	f7ff ffad 	bl	8000234 <USB_DEVICE_MasterHardReset>
  MX_USB_DEVICE_Init();
 80002da:	f007 fe29 	bl	8007f30 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80002de:	f000 fa11 	bl	8000704 <MX_TIM1_Init>
  MX_TIM4_Init();
 80002e2:	f000 fa61 	bl	80007a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 80002e6:	4827      	ldr	r0, [pc, #156]	@ (8000384 <main+0xc0>)
 80002e8:	f003 f8e4 	bl	80034b4 <HAL_TIM_Base_Start_IT>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <main+0x32>
  {
	  Error_Handler();
 80002f2:	f000 f953 	bl	800059c <Error_Handler>
  }
  targetPosStepsX = 100;
 80002f6:	4b24      	ldr	r3, [pc, #144]	@ (8000388 <main+0xc4>)
 80002f8:	2264      	movs	r2, #100	@ 0x64
 80002fa:	601a      	str	r2, [r3, #0]
  targetPosStepsY = 100;
 80002fc:	4b23      	ldr	r3, [pc, #140]	@ (800038c <main+0xc8>)
 80002fe:	2264      	movs	r2, #100	@ 0x64
 8000300:	601a      	str	r2, [r3, #0]
  const char msg[] = "****** Incrediplotter v0.2 ******\r\n";
 8000302:	4b23      	ldr	r3, [pc, #140]	@ (8000390 <main+0xcc>)
 8000304:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000312:	682b      	ldr	r3, [r5, #0]
 8000314:	6023      	str	r3, [r4, #0]
  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800031a:	2123      	movs	r1, #35	@ 0x23
 800031c:	4618      	mov	r0, r3
 800031e:	f007 fef1 	bl	8008104 <CDC_Transmit_FS>
  const char hi[] = "hello world";
 8000322:	4a1c      	ldr	r2, [pc, #112]	@ (8000394 <main+0xd0>)
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	ca07      	ldmia	r2, {r0, r1, r2}
 800032a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  CDC_Transmit_FS((uint8_t*)hi, strlen(hi));
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	210b      	movs	r1, #11
 8000334:	4618      	mov	r0, r3
 8000336:	f007 fee5 	bl	8008104 <CDC_Transmit_FS>
  const char hi2[] = "another message";
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <main+0xd4>)
 800033c:	f107 0408 	add.w	r4, r7, #8
 8000340:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000342:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  CDC_Transmit_FS((uint8_t*)hi2, strlen(hi2));
 8000346:	f107 0308 	add.w	r3, r7, #8
 800034a:	210f      	movs	r1, #15
 800034c:	4618      	mov	r0, r3
 800034e:	f007 fed9 	bl	8008104 <CDC_Transmit_FS>
  {
//	sprintf(txBuf, "ugh %u\r\n", count);
//	count++;
//	CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
//	HAL_Delay(100);
	uint8_t rxByte = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	71fb      	strb	r3, [r7, #7]
	if (VCP_ReadChar(&rxByte))
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff8d 	bl	8000278 <VCP_ReadChar>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f6      	beq.n	8000352 <main+0x8e>
	{
		sprintf(txBuf, "Got 0x%02X\r\n", rxByte);
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	461a      	mov	r2, r3
 8000368:	490c      	ldr	r1, [pc, #48]	@ (800039c <main+0xd8>)
 800036a:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <main+0xdc>)
 800036c:	f008 faa8 	bl	80088c0 <siprintf>
		CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 8000370:	480b      	ldr	r0, [pc, #44]	@ (80003a0 <main+0xdc>)
 8000372:	f7ff feeb 	bl	800014c <strlen>
 8000376:	4603      	mov	r3, r0
 8000378:	b29b      	uxth	r3, r3
 800037a:	4619      	mov	r1, r3
 800037c:	4808      	ldr	r0, [pc, #32]	@ (80003a0 <main+0xdc>)
 800037e:	f007 fec1 	bl	8008104 <CDC_Transmit_FS>
  {
 8000382:	e7e6      	b.n	8000352 <main+0x8e>
 8000384:	20000234 	.word	0x20000234
 8000388:	20000210 	.word	0x20000210
 800038c:	20000214 	.word	0x20000214
 8000390:	08009248 	.word	0x08009248
 8000394:	0800926c 	.word	0x0800926c
 8000398:	08009278 	.word	0x08009278
 800039c:	08009238 	.word	0x08009238
 80003a0:	20000220 	.word	0x20000220

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b094      	sub	sp, #80	@ 0x50
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003ae:	2228      	movs	r2, #40	@ 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f008 faa6 	bl	8008904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d4:	2301      	movs	r3, #1
 80003d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e2:	2301      	movs	r3, #1
 80003e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e6:	2302      	movs	r3, #2
 80003e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 fb76 	bl	8002aec <HAL_RCC_OscConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000406:	f000 f8c9 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	2302      	movs	r3, #2
 8000410:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800041a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	2102      	movs	r1, #2
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fde2 	bl	8002ff0 <HAL_RCC_ClockConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000432:	f000 f8b3 	bl	800059c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000436:	2310      	movs	r3, #16
 8000438:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4618      	mov	r0, r3
 8000442:	f002 ff31 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800044c:	f000 f8a6 	bl	800059c <Error_Handler>
  }
}
 8000450:	bf00      	nop
 8000452:	3750      	adds	r7, #80	@ 0x50
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <Periodic>:

/* USER CODE BEGIN 4 */

void Periodic()
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
	bool shouldStepX = posStepsX != targetPosStepsX;
 800045e:	4b40      	ldr	r3, [pc, #256]	@ (8000560 <Periodic+0x108>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	4b40      	ldr	r3, [pc, #256]	@ (8000564 <Periodic+0x10c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	429a      	cmp	r2, r3
 8000468:	bf14      	ite	ne
 800046a:	2301      	movne	r3, #1
 800046c:	2300      	moveq	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]
	bool dirX = targetPosStepsX > posStepsX;
 8000470:	4b3c      	ldr	r3, [pc, #240]	@ (8000564 <Periodic+0x10c>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b3a      	ldr	r3, [pc, #232]	@ (8000560 <Periodic+0x108>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	429a      	cmp	r2, r3
 800047a:	bfcc      	ite	gt
 800047c:	2301      	movgt	r3, #1
 800047e:	2300      	movle	r3, #0
 8000480:	73bb      	strb	r3, [r7, #14]
	if (shouldStepX)
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d02a      	beq.n	80004de <Periodic+0x86>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000488:	2104      	movs	r1, #4
 800048a:	4837      	ldr	r0, [pc, #220]	@ (8000568 <Periodic+0x110>)
 800048c:	f000 fdb4 	bl	8000ff8 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, dirX);
 8000490:	7bbb      	ldrb	r3, [r7, #14]
 8000492:	461a      	mov	r2, r3
 8000494:	2104      	movs	r1, #4
 8000496:	4835      	ldr	r0, [pc, #212]	@ (800056c <Periodic+0x114>)
 8000498:	f000 fd96 	bl	8000fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, true);
 800049c:	2201      	movs	r2, #1
 800049e:	2102      	movs	r1, #2
 80004a0:	4832      	ldr	r0, [pc, #200]	@ (800056c <Periodic+0x114>)
 80004a2:	f000 fd91 	bl	8000fc8 <HAL_GPIO_WritePin>
		volatile int delayer = 10;
 80004a6:	230a      	movs	r3, #10
 80004a8:	60bb      	str	r3, [r7, #8]
		while (delayer > 0) { delayer--; }
 80004aa:	e002      	b.n	80004b2 <Periodic+0x5a>
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dcf9      	bgt.n	80004ac <Periodic+0x54>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, false);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2102      	movs	r1, #2
 80004bc:	482b      	ldr	r0, [pc, #172]	@ (800056c <Periodic+0x114>)
 80004be:	f000 fd83 	bl	8000fc8 <HAL_GPIO_WritePin>
		if (dirX) {
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d005      	beq.n	80004d4 <Periodic+0x7c>
			posStepsX++;
 80004c8:	4b25      	ldr	r3, [pc, #148]	@ (8000560 <Periodic+0x108>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	4a24      	ldr	r2, [pc, #144]	@ (8000560 <Periodic+0x108>)
 80004d0:	6013      	str	r3, [r2, #0]
 80004d2:	e004      	b.n	80004de <Periodic+0x86>
		} else {
			posStepsX--;
 80004d4:	4b22      	ldr	r3, [pc, #136]	@ (8000560 <Periodic+0x108>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3b01      	subs	r3, #1
 80004da:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <Periodic+0x108>)
 80004dc:	6013      	str	r3, [r2, #0]
		}
	}
	bool shouldStepY = posStepsY != targetPosStepsY;
 80004de:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <Periodic+0x118>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	4b24      	ldr	r3, [pc, #144]	@ (8000574 <Periodic+0x11c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	737b      	strb	r3, [r7, #13]
	bool dirY = targetPosStepsY > posStepsY;
 80004f0:	4b20      	ldr	r3, [pc, #128]	@ (8000574 <Periodic+0x11c>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <Periodic+0x118>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	bfcc      	ite	gt
 80004fc:	2301      	movgt	r3, #1
 80004fe:	2300      	movle	r3, #0
 8000500:	733b      	strb	r3, [r7, #12]
	if (shouldStepY)
 8000502:	7b7b      	ldrb	r3, [r7, #13]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d026      	beq.n	8000556 <Periodic+0xfe>
	{
		HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, dirY);
 8000508:	7b3b      	ldrb	r3, [r7, #12]
 800050a:	461a      	mov	r2, r3
 800050c:	2101      	movs	r1, #1
 800050e:	4816      	ldr	r0, [pc, #88]	@ (8000568 <Periodic+0x110>)
 8000510:	f000 fd5a 	bl	8000fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, true);
 8000514:	2201      	movs	r2, #1
 8000516:	2102      	movs	r1, #2
 8000518:	4813      	ldr	r0, [pc, #76]	@ (8000568 <Periodic+0x110>)
 800051a:	f000 fd55 	bl	8000fc8 <HAL_GPIO_WritePin>
		volatile int delayer = 10;
 800051e:	230a      	movs	r3, #10
 8000520:	607b      	str	r3, [r7, #4]
		while (delayer > 0) { delayer--; }
 8000522:	e002      	b.n	800052a <Periodic+0xd2>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3b01      	subs	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	dcf9      	bgt.n	8000524 <Periodic+0xcc>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, false);
 8000530:	2200      	movs	r2, #0
 8000532:	2102      	movs	r1, #2
 8000534:	480c      	ldr	r0, [pc, #48]	@ (8000568 <Periodic+0x110>)
 8000536:	f000 fd47 	bl	8000fc8 <HAL_GPIO_WritePin>
		if (dirY) {
 800053a:	7b3b      	ldrb	r3, [r7, #12]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d005      	beq.n	800054c <Periodic+0xf4>
			posStepsY++;
 8000540:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <Periodic+0x118>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <Periodic+0x118>)
 8000548:	6013      	str	r3, [r2, #0]
		} else {
			posStepsY--;
		}
	}
}
 800054a:	e004      	b.n	8000556 <Periodic+0xfe>
			posStepsY--;
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <Periodic+0x118>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a07      	ldr	r2, [pc, #28]	@ (8000570 <Periodic+0x118>)
 8000554:	6013      	str	r3, [r2, #0]
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000218 	.word	0x20000218
 8000564:	20000210 	.word	0x20000210
 8000568:	40010c00 	.word	0x40010c00
 800056c:	40010800 	.word	0x40010800
 8000570:	2000021c 	.word	0x2000021c
 8000574:	20000214 	.word	0x20000214

08000578 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d101      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Periodic();
 800058a:	f7ff ff65 	bl	8000458 <Periodic>
	}
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40012c00 	.word	0x40012c00

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <Error_Handler+0x8>

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <NMI_Handler+0x4>

08000614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <MemManage_Handler+0x4>

08000624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <BusFault_Handler+0x4>

0800062c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <UsageFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 f9e2 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800066a:	f000 fdfa 	bl	8001262 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000f90 	.word	0x20000f90

08000678 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800067c:	4802      	ldr	r0, [pc, #8]	@ (8000688 <TIM1_UP_IRQHandler+0x10>)
 800067e:	f002 ffba 	bl	80035f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000234 	.word	0x20000234

0800068c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000694:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <_sbrk+0x5c>)
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <_sbrk+0x60>)
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <_sbrk+0x64>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <_sbrk+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d207      	bcs.n	80006cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006bc:	f008 f92a 	bl	8008914 <__errno>
 80006c0:	4603      	mov	r3, r0
 80006c2:	220c      	movs	r2, #12
 80006c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	e009      	b.n	80006e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	4a05      	ldr	r2, [pc, #20]	@ (80006f0 <_sbrk+0x64>)
 80006dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20005000 	.word	0x20005000
 80006ec:	00000400 	.word	0x00000400
 80006f0:	20000230 	.word	0x20000230
 80006f4:	200015d0 	.word	0x200015d0

080006f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 8000722:	4a20      	ldr	r2, [pc, #128]	@ (80007a4 <MX_TIM1_Init+0xa0>)
 8000724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 8000728:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800072c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 8000736:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800073a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800074e:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 8000750:	f002 fe60 	bl	8003414 <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800075a:	f7ff ff1f 	bl	800059c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000762:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4619      	mov	r1, r3
 800076a:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 800076c:	f003 f8f6 	bl	800395c <HAL_TIM_ConfigClockSource>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000776:	f7ff ff11 	bl	800059c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_TIM1_Init+0x9c>)
 8000788:	f003 fc60 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000792:	f7ff ff03 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000234 	.word	0x20000234
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ca:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <MX_TIM4_Init+0xac>)
 80007cc:	4a22      	ldr	r2, [pc, #136]	@ (8000858 <MX_TIM4_Init+0xb0>)
 80007ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80007d0:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_TIM4_Init+0xac>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_TIM4_Init+0xac>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_TIM4_Init+0xac>)
 80007de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_TIM4_Init+0xac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_TIM4_Init+0xac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007f0:	4818      	ldr	r0, [pc, #96]	@ (8000854 <MX_TIM4_Init+0xac>)
 80007f2:	f002 feb1 	bl	8003558 <HAL_TIM_PWM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80007fc:	f7ff fece 	bl	800059c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4619      	mov	r1, r3
 800080e:	4811      	ldr	r0, [pc, #68]	@ (8000854 <MX_TIM4_Init+0xac>)
 8000810:	f003 fc1c 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800081a:	f7ff febf 	bl	800059c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081e:	2360      	movs	r3, #96	@ 0x60
 8000820:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	220c      	movs	r2, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <MX_TIM4_Init+0xac>)
 8000836:	f002 ffcf 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000840:	f7ff feac 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000844:	4803      	ldr	r0, [pc, #12]	@ (8000854 <MX_TIM4_Init+0xac>)
 8000846:	f000 f84d 	bl	80008e4 <HAL_TIM_MspPostInit>

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000027c 	.word	0x2000027c
 8000858:	40000800 	.word	0x40000800

0800085c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <HAL_TIM_Base_MspInit+0x44>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d113      	bne.n	8000896 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <HAL_TIM_Base_MspInit+0x48>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <HAL_TIM_Base_MspInit+0x48>)
 8000874:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_TIM_Base_MspInit+0x48>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2019      	movs	r0, #25
 800088c:	f000 f9e1 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000890:	2019      	movs	r0, #25
 8000892:	f000 f9fa 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40012c00 	.word	0x40012c00
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <HAL_TIM_PWM_MspInit+0x34>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10b      	bne.n	80008d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_TIM_PWM_MspInit+0x38>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_TIM_PWM_MspInit+0x38>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_TIM_PWM_MspInit+0x38>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40000800 	.word	0x40000800
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a10      	ldr	r2, [pc, #64]	@ (8000940 <HAL_TIM_MspPostInit+0x5c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d118      	bne.n	8000936 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_TIM_MspPostInit+0x60>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <HAL_TIM_MspPostInit+0x60>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_TIM_MspPostInit+0x60>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 800091c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000920:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <HAL_TIM_MspPostInit+0x64>)
 8000932:	f000 f9c5 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40000800 	.word	0x40000800
 8000944:	40021000 	.word	0x40021000
 8000948:	40010c00 	.word	0x40010c00

0800094c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800094c:	f7ff fed4 	bl	80006f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480b      	ldr	r0, [pc, #44]	@ (8000980 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000952:	490c      	ldr	r1, [pc, #48]	@ (8000984 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000954:	4a0c      	ldr	r2, [pc, #48]	@ (8000988 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a09      	ldr	r2, [pc, #36]	@ (800098c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000968:	4c09      	ldr	r4, [pc, #36]	@ (8000990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f007 ffd3 	bl	8008920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097a:	f7ff fca3 	bl	80002c4 <main>
  bx lr
 800097e:	4770      	bx	lr
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000988:	08009338 	.word	0x08009338
  ldr r2, =_sbss
 800098c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000990:	200015d0 	.word	0x200015d0

08000994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_2_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_Init+0x28>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_Init+0x28>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f947 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fdf8 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f95f 	bl	8000ca6 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f927 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	@ (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a03      	ldr	r2, [pc, #12]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000008 	.word	0x20000008
 8000a44:	200002c4 	.word	0x200002c4

08000a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	@ (8000a58 <HAL_GetTick+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	200002c4 	.word	0x200002c4

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff fff0 	bl	8000a48 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffe0 	bl	8000a48 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4906      	ldr	r1, [pc, #24]	@ (8000b3c <__NVIC_EnableIRQ+0x34>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	@ (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	@ (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	@ 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	@ 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff90 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff2d 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff42 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff90 	bl	8000b94 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5f 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff35 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	@ 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e169      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8158 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a9a      	ldr	r2, [pc, #616]	@ (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d05e      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000cfc:	4a98      	ldr	r2, [pc, #608]	@ (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d875      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d02:	4a98      	ldr	r2, [pc, #608]	@ (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d058      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d08:	4a96      	ldr	r2, [pc, #600]	@ (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d86f      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d0e:	4a96      	ldr	r2, [pc, #600]	@ (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d052      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d14:	4a94      	ldr	r2, [pc, #592]	@ (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d869      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d1a:	4a94      	ldr	r2, [pc, #592]	@ (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d04c      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d20:	4a92      	ldr	r2, [pc, #584]	@ (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d863      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d26:	4a92      	ldr	r2, [pc, #584]	@ (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d046      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d2c:	4a90      	ldr	r2, [pc, #576]	@ (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d85d      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d82a      	bhi.n	8000d8c <HAL_GPIO_Init+0xcc>
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d859      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d40 <HAL_GPIO_Init+0x80>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000dbb 	.word	0x08000dbb
 8000d44:	08000d95 	.word	0x08000d95
 8000d48:	08000da7 	.word	0x08000da7
 8000d4c:	08000de9 	.word	0x08000de9
 8000d50:	08000def 	.word	0x08000def
 8000d54:	08000def 	.word	0x08000def
 8000d58:	08000def 	.word	0x08000def
 8000d5c:	08000def 	.word	0x08000def
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000def 	.word	0x08000def
 8000d68:	08000def 	.word	0x08000def
 8000d6c:	08000def 	.word	0x08000def
 8000d70:	08000def 	.word	0x08000def
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000def 	.word	0x08000def
 8000d7c:	08000def 	.word	0x08000def
 8000d80:	08000def 	.word	0x08000def
 8000d84:	08000d9d 	.word	0x08000d9d
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	4a79      	ldr	r2, [pc, #484]	@ (8000f74 <HAL_GPIO_Init+0x2b4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d92:	e02c      	b.n	8000dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e029      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	3304      	adds	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e024      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	3308      	adds	r3, #8
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e01f      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	330c      	adds	r3, #12
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e01a      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e013      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	611a      	str	r2, [r3, #16]
          break;
 8000dda:	e009      	b.n	8000df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	615a      	str	r2, [r3, #20]
          break;
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          break;
 8000dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2bff      	cmp	r3, #255	@ 0xff
 8000df4:	d801      	bhi.n	8000dfa <HAL_GPIO_Init+0x13a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	e001      	b.n	8000dfe <HAL_GPIO_Init+0x13e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2bff      	cmp	r3, #255	@ 0xff
 8000e04:	d802      	bhi.n	8000e0c <HAL_GPIO_Init+0x14c>
 8000e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0x152>
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	210f      	movs	r1, #15
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	401a      	ands	r2, r3
 8000e24:	6a39      	ldr	r1, [r7, #32]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80b1 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e40:	4b4d      	ldr	r3, [pc, #308]	@ (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	@ (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e58:	4a48      	ldr	r2, [pc, #288]	@ (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a40      	ldr	r2, [pc, #256]	@ (8000f80 <HAL_GPIO_Init+0x2c0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d013      	beq.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a3f      	ldr	r2, [pc, #252]	@ (8000f84 <HAL_GPIO_Init+0x2c4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00d      	beq.n	8000ea8 <HAL_GPIO_Init+0x1e8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3d      	ldr	r2, [pc, #244]	@ (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d101      	bne.n	8000ea0 <HAL_GPIO_Init+0x1e0>
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e004      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000eac:	2300      	movs	r3, #0
 8000eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eb0:	f002 0203 	and.w	r2, r2, #3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ebe:	492f      	ldr	r1, [pc, #188]	@ (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	492c      	ldr	r1, [pc, #176]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	608b      	str	r3, [r1, #8]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4928      	ldr	r1, [pc, #160]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f00:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4922      	ldr	r1, [pc, #136]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	60cb      	str	r3, [r1, #12]
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f0e:	4b20      	ldr	r3, [pc, #128]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	491e      	ldr	r1, [pc, #120]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f28:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4918      	ldr	r1, [pc, #96]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	604b      	str	r3, [r1, #4]
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4914      	ldr	r1, [pc, #80]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d021      	beq.n	8000f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	490e      	ldr	r1, [pc, #56]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
 8000f5c:	e021      	b.n	8000fa2 <HAL_GPIO_Init+0x2e2>
 8000f5e:	bf00      	nop
 8000f60:	10320000 	.word	0x10320000
 8000f64:	10310000 	.word	0x10310000
 8000f68:	10220000 	.word	0x10220000
 8000f6c:	10210000 	.word	0x10210000
 8000f70:	10120000 	.word	0x10120000
 8000f74:	10110000 	.word	0x10110000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40010800 	.word	0x40010800
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40011400 	.word	0x40011400
 8000f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4909      	ldr	r1, [pc, #36]	@ (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f47f ae8e 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	372c      	adds	r7, #44	@ 0x2c
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	611a      	str	r2, [r3, #16]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4013      	ands	r3, r2
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43d9      	mvns	r1, r3
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	400b      	ands	r3, r1
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	611a      	str	r2, [r3, #16]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e0e8      	b.n	800120e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d106      	bne.n	8001056 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f007 f98b 	bl	800836c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2203      	movs	r2, #3
 800105a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f882 	bl	8004172 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3304      	adds	r3, #4
 8001076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001078:	f003 f858 	bl	800412c <USB_CoreInit>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2202      	movs	r2, #2
 8001086:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0bf      	b.n	800120e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f003 f886 	bl	80041a6 <USB_SetCurrentMode>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0b0      	b.n	800120e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e03e      	b.n	8001130 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	3311      	adds	r3, #17
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	440b      	add	r3, r1
 80010d4:	3310      	adds	r3, #16
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	440b      	add	r3, r1
 80010e8:	3313      	adds	r3, #19
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	3320      	adds	r3, #32
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	3324      	adds	r3, #36	@ 0x24
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	3301      	adds	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	429a      	cmp	r2, r3
 8001138:	d3bb      	bcc.n	80010b2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e044      	b.n	80011ca <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	440b      	add	r3, r1
 8001190:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	3301      	adds	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3b5      	bcc.n	8001140 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3304      	adds	r3, #4
 80011dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011de:	f002 ffee 	bl	80041be <USB_DevInit>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e00c      	b.n	800120e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f005 fa6d 	bl	80066e6 <USB_DevDisconnect>

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_PCD_Start+0x16>
 8001228:	2302      	movs	r3, #2
 800122a:	e016      	b.n	800125a <HAL_PCD_Start+0x44>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f002 ff84 	bl	8004146 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800123e:	2101      	movs	r1, #1
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f007 fb06 	bl	8008852 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f005 fa41 	bl	80066d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b088      	sub	sp, #32
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fa43 	bl	80066fa <USB_ReadInterrupts>
 8001274:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fb1a 	bl	80018ba <PCD_EP_ISR_Handler>

    return;
 8001286:	e119      	b.n	80014bc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128e:	2b00      	cmp	r3, #0
 8001290:	d013      	beq.n	80012ba <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800129a:	b29a      	uxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012a4:	b292      	uxth	r2, r2
 80012a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f007 f8d9 	bl	8008462 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012b0:	2100      	movs	r1, #0
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f905 	bl	80014c2 <HAL_PCD_SetAddress>

    return;
 80012b8:	e100      	b.n	80014bc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00c      	beq.n	80012de <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80012d6:	b292      	uxth	r2, r2
 80012d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012dc:	e0ee      	b.n	80014bc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00c      	beq.n	8001302 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80012fa:	b292      	uxth	r2, r2
 80012fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001300:	e0dc      	b.n	80014bc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d027      	beq.n	800135c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0204 	bic.w	r2, r2, #4
 800131e:	b292      	uxth	r2, r2
 8001320:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0208 	bic.w	r2, r2, #8
 8001336:	b292      	uxth	r2, r2
 8001338:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f007 f8c9 	bl	80084d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001354:	b292      	uxth	r2, r2
 8001356:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800135a:	e0af      	b.n	80014bc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8083 	beq.w	800146e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001368:	2300      	movs	r3, #0
 800136a:	77fb      	strb	r3, [r7, #31]
 800136c:	e010      	b.n	8001390 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	441a      	add	r2, r3
 800137a:	7ffb      	ldrb	r3, [r7, #31]
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	b292      	uxth	r2, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	3320      	adds	r3, #32
 8001384:	443b      	add	r3, r7
 8001386:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	3301      	adds	r3, #1
 800138e:	77fb      	strb	r3, [r7, #31]
 8001390:	7ffb      	ldrb	r3, [r7, #31]
 8001392:	2b07      	cmp	r3, #7
 8001394:	d9eb      	bls.n	800136e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	b292      	uxth	r2, r2
 80013aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	b292      	uxth	r2, r2
 80013c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013c6:	bf00      	nop
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f6      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	77fb      	strb	r3, [r7, #31]
 80013f6:	e00f      	b.n	8001418 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	4611      	mov	r1, r2
 8001400:	7ffa      	ldrb	r2, [r7, #31]
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	440a      	add	r2, r1
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	3320      	adds	r3, #32
 800140a:	443b      	add	r3, r7
 800140c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001410:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	3301      	adds	r3, #1
 8001416:	77fb      	strb	r3, [r7, #31]
 8001418:	7ffb      	ldrb	r3, [r7, #31]
 800141a:	2b07      	cmp	r3, #7
 800141c:	d9ec      	bls.n	80013f8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001426:	b29a      	uxth	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0208 	orr.w	r2, r2, #8
 8001430:	b292      	uxth	r2, r2
 8001432:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800143e:	b29a      	uxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001448:	b292      	uxth	r2, r2
 800144a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0204 	orr.w	r2, r2, #4
 8001460:	b292      	uxth	r2, r2
 8001462:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f007 f81a 	bl	80084a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800146c:	e026      	b.n	80014bc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00f      	beq.n	8001498 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800148a:	b292      	uxth	r2, r2
 800148c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f006 ffd8 	bl	8008446 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001496:	e011      	b.n	80014bc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00c      	beq.n	80014bc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014b4:	b292      	uxth	r2, r2
 80014b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014ba:	bf00      	nop
  }
}
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_PCD_SetAddress+0x1a>
 80014d8:	2302      	movs	r3, #2
 80014da:	e012      	b.n	8001502 <HAL_PCD_SetAddress+0x40>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	78fa      	ldrb	r2, [r7, #3]
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 f8da 	bl	80066ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	4608      	mov	r0, r1
 8001514:	4611      	mov	r1, r2
 8001516:	461a      	mov	r2, r3
 8001518:	4603      	mov	r3, r0
 800151a:	70fb      	strb	r3, [r7, #3]
 800151c:	460b      	mov	r3, r1
 800151e:	803b      	strh	r3, [r7, #0]
 8001520:	4613      	mov	r3, r2
 8001522:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800152c:	2b00      	cmp	r3, #0
 800152e:	da0e      	bge.n	800154e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	3310      	adds	r3, #16
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2201      	movs	r2, #1
 800154a:	705a      	strb	r2, [r3, #1]
 800154c:	e00e      	b.n	800156c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f003 0207 	and.w	r2, r3, #7
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	b2da      	uxtb	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001578:	883a      	ldrh	r2, [r7, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	78ba      	ldrb	r2, [r7, #2]
 8001582:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001584:	78bb      	ldrb	r3, [r7, #2]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d102      	bne.n	8001590 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_PCD_EP_Open+0x94>
 800159a:	2302      	movs	r3, #2
 800159c:	e00e      	b.n	80015bc <HAL_PCD_EP_Open+0xb2>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68f9      	ldr	r1, [r7, #12]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fe23 	bl	80041f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80015ba:	7afb      	ldrb	r3, [r7, #11]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da0e      	bge.n	80015f6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	f003 0207 	and.w	r2, r3, #7
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	3310      	adds	r3, #16
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	705a      	strb	r2, [r3, #1]
 80015f4:	e00e      	b.n	8001614 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	f003 0207 	and.w	r2, r3, #7
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	b2da      	uxtb	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_PCD_EP_Close+0x6a>
 800162a:	2302      	movs	r3, #2
 800162c:	e00e      	b.n	800164c <HAL_PCD_EP_Close+0x88>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68f9      	ldr	r1, [r7, #12]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 f99b 	bl	8004978 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	460b      	mov	r3, r1
 8001662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	f003 0207 	and.w	r2, r3, #7
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2200      	movs	r2, #0
 8001692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001694:	7afb      	ldrb	r3, [r7, #11]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	b2da      	uxtb	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6979      	ldr	r1, [r7, #20]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fb52 	bl	8004d50 <USB_EPStartXfer>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0207 	and.w	r2, r3, #7
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80016d8:	681b      	ldr	r3, [r3, #0]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	460b      	mov	r3, r1
 80016f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	f003 0207 	and.w	r2, r3, #7
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	3310      	adds	r3, #16
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2201      	movs	r2, #1
 800172e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001730:	7afb      	ldrb	r3, [r7, #11]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	b2da      	uxtb	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6979      	ldr	r1, [r7, #20]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fb04 	bl	8004d50 <USB_EPStartXfer>

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	7912      	ldrb	r2, [r2, #4]
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e04c      	b.n	800180a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da0e      	bge.n	8001796 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	f003 0207 	and.w	r2, r3, #7
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	3310      	adds	r3, #16
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	705a      	strb	r2, [r3, #1]
 8001794:	e00c      	b.n	80017b0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_PCD_EP_SetStall+0x7e>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e01c      	b.n	800180a <HAL_PCD_EP_SetStall+0xb8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 fe67 	bl	80064b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d108      	bne.n	8001800 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f004 ff8c 	bl	8006718 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	7912      	ldrb	r2, [r2, #4]
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e040      	b.n	80018b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da0e      	bge.n	8001856 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	f003 0207 	and.w	r2, r3, #7
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	3310      	adds	r3, #16
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	705a      	strb	r2, [r3, #1]
 8001854:	e00e      	b.n	8001874 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	f003 0207 	and.w	r2, r3, #7
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_PCD_EP_ClrStall+0x82>
 8001890:	2302      	movs	r3, #2
 8001892:	e00e      	b.n	80018b2 <HAL_PCD_EP_ClrStall+0xa0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fe55 	bl	8006552 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b096      	sub	sp, #88	@ 0x58
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018c2:	e3bb      	b.n	800203c <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018cc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80018de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 8175 	bne.w	8001bd2 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d14e      	bne.n	8001992 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001904:	81fb      	strh	r3, [r7, #14]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001914:	b29b      	uxth	r3, r3
 8001916:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3310      	adds	r3, #16
 800191c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001926:	b29b      	uxth	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	3302      	adds	r3, #2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001948:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800194a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	441a      	add	r2, r3
 8001954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001956:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001958:	2100      	movs	r1, #0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f006 fd59 	bl	8008412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7b5b      	ldrb	r3, [r3, #13]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8368 	beq.w	800203c <PCD_EP_ISR_Handler+0x782>
 800196c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 8363 	bne.w	800203c <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b5b      	ldrb	r3, [r3, #13]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001980:	b2da      	uxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	735a      	strb	r2, [r3, #13]
 8001990:	e354      	b.n	800203c <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001998:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d034      	beq.n	8001a1a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	3306      	adds	r3, #6
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80019e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f004 fee3 	bl	80067ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a00:	4013      	ands	r3, r2
 8001a02:	823b      	strh	r3, [r7, #16]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	8a3a      	ldrh	r2, [r7, #16]
 8001a0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a0e:	b292      	uxth	r2, r2
 8001a10:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f006 fcd0 	bl	80083b8 <HAL_PCD_SetupStageCallback>
 8001a18:	e310      	b.n	800203c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a1a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f280 830c 	bge.w	800203c <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a30:	4013      	ands	r3, r2
 8001a32:	83fb      	strh	r3, [r7, #30]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	8bfa      	ldrh	r2, [r7, #30]
 8001a3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a3e:	b292      	uxth	r2, r2
 8001a40:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	3306      	adds	r3, #6
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d019      	beq.n	8001aaa <PCD_EP_ISR_Handler+0x1f0>
 8001a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a84:	6959      	ldr	r1, [r3, #20]
 8001a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a88:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f004 fe93 	bl	80067ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f006 fc99 	bl	80083dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ab4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 82bd 	bne.w	800203c <PCD_EP_ISR_Handler+0x782>
 8001ac2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ac6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001aca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001ace:	f000 82b5 	beq.w	800203c <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	801a      	strh	r2, [r3, #0]
 8001b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b08:	d91d      	bls.n	8001b46 <PCD_EP_ISR_Handler+0x28c>
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <PCD_EP_ISR_Handler+0x26a>
 8001b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b20:	3b01      	subs	r3, #1
 8001b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	029b      	lsls	r3, r3, #10
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	e026      	b.n	8001b94 <PCD_EP_ISR_Handler+0x2da>
 8001b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <PCD_EP_ISR_Handler+0x2aa>
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	e017      	b.n	8001b94 <PCD_EP_ISR_Handler+0x2da>
 8001b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	085b      	lsrs	r3, r3, #1
 8001b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <PCD_EP_ISR_Handler+0x2c4>
 8001b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	029b      	lsls	r3, r3, #10
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ba4:	827b      	strh	r3, [r7, #18]
 8001ba6:	8a7b      	ldrh	r3, [r7, #18]
 8001ba8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001bac:	827b      	strh	r3, [r7, #18]
 8001bae:	8a7b      	ldrh	r3, [r7, #18]
 8001bb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001bb4:	827b      	strh	r3, [r7, #18]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	8a7b      	ldrh	r3, [r7, #18]
 8001bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	8013      	strh	r3, [r2, #0]
 8001bd0:	e234      	b.n	800203c <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001be6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f280 80fc 	bge.w	8001de8 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c06:	4013      	ands	r3, r2
 8001c08:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001c1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c22:	b292      	uxth	r2, r2
 8001c24:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c26:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3e:	7b1b      	ldrb	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d125      	bne.n	8001c90 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	3306      	adds	r3, #6
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001c70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8092 	beq.w	8001d9e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c80:	6959      	ldr	r1, [r3, #20]
 8001c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c84:	88da      	ldrh	r2, [r3, #6]
 8001c86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c8a:	f004 fd96 	bl	80067ba <USB_ReadPMA>
 8001c8e:	e086      	b.n	8001d9e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d10a      	bne.n	8001cae <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f9d9 	bl	8002058 <HAL_PCD_EP_DB_Receive>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001cac:	e077      	b.n	8001d9e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	441a      	add	r2, r3
 8001cda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d024      	beq.n	8001d56 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3302      	adds	r3, #2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d34:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d02e      	beq.n	8001d9e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d46:	6959      	ldr	r1, [r3, #20]
 8001d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4a:	891a      	ldrh	r2, [r3, #8]
 8001d4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d50:	f004 fd33 	bl	80067ba <USB_ReadPMA>
 8001d54:	e023      	b.n	8001d9e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3306      	adds	r3, #6
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d7e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d90:	6959      	ldr	r1, [r3, #20]
 8001d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d94:	895a      	ldrh	r2, [r3, #10]
 8001d96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d9a:	f004 fd0e 	bl	80067ba <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001da6:	441a      	add	r2, r3
 8001da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001daa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001db4:	441a      	add	r2, r3
 8001db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <PCD_EP_ISR_Handler+0x514>
 8001dc2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d206      	bcs.n	8001ddc <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f006 fb01 	bl	80083dc <HAL_PCD_DataOutStageCallback>
 8001dda:	e005      	b.n	8001de8 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 ffb4 	bl	8004d50 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001de8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8123 	beq.w	800203c <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001df6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	3310      	adds	r3, #16
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	441a      	add	r2, r3
 8001e36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e48:	78db      	ldrb	r3, [r3, #3]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	f040 80a2 	bne.w	8001f94 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e58:	7b1b      	ldrb	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8093 	beq.w	8001f86 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d046      	beq.n	8001efa <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d126      	bne.n	8001ec2 <PCD_EP_ISR_Handler+0x608>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	4413      	add	r3, r2
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	011a      	lsls	r2, r3, #4
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	4413      	add	r3, r2
 8001e96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	801a      	strh	r2, [r3, #0]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	801a      	strh	r2, [r3, #0]
 8001ec0:	e061      	b.n	8001f86 <PCD_EP_ISR_Handler+0x6cc>
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec4:	785b      	ldrb	r3, [r3, #1]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d15d      	bne.n	8001f86 <PCD_EP_ISR_Handler+0x6cc>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ede:	4413      	add	r3, r2
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	011a      	lsls	r2, r3, #4
 8001ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eea:	4413      	add	r3, r2
 8001eec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	e045      	b.n	8001f86 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d126      	bne.n	8001f56 <PCD_EP_ISR_Handler+0x69c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1c:	4413      	add	r3, r2
 8001f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	011a      	lsls	r2, r3, #4
 8001f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f28:	4413      	add	r3, r2
 8001f2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	e017      	b.n	8001f86 <PCD_EP_ISR_Handler+0x6cc>
 8001f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f58:	785b      	ldrb	r3, [r3, #1]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d113      	bne.n	8001f86 <PCD_EP_ISR_Handler+0x6cc>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f6c:	4413      	add	r3, r2
 8001f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	011a      	lsls	r2, r3, #4
 8001f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f78:	4413      	add	r3, r2
 8001f7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f82:	2200      	movs	r2, #0
 8001f84:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f006 fa40 	bl	8008412 <HAL_PCD_DataInStageCallback>
 8001f92:	e053      	b.n	800203c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d146      	bne.n	800202e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d907      	bls.n	8001fe8 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fe0:	1ad2      	subs	r2, r2, r3
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe4:	619a      	str	r2, [r3, #24]
 8001fe6:	e002      	b.n	8001fee <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f006 fa08 	bl	8008412 <HAL_PCD_DataInStageCallback>
 8002002:	e01b      	b.n	800203c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800200c:	441a      	add	r2, r3
 800200e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002010:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800201a:	441a      	add	r2, r3
 800201c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fe92 	bl	8004d50 <USB_EPStartXfer>
 800202c:	e006      	b.n	800203c <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800202e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002032:	461a      	mov	r2, r3
 8002034:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f91b 	bl	8002272 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002044:	b29b      	uxth	r3, r3
 8002046:	b21b      	sxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f6ff ac3b 	blt.w	80018c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3758      	adds	r7, #88	@ 0x58
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	4613      	mov	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d07e      	beq.n	800216e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	3302      	adds	r3, #2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002098:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	8b7b      	ldrh	r3, [r7, #26]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d306      	bcc.n	80020b2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	8b7b      	ldrh	r3, [r7, #26]
 80020aa:	1ad2      	subs	r2, r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	619a      	str	r2, [r3, #24]
 80020b0:	e002      	b.n	80020b8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d123      	bne.n	8002108 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020da:	833b      	strh	r3, [r7, #24]
 80020dc:	8b3b      	ldrh	r3, [r7, #24]
 80020de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020e2:	833b      	strh	r3, [r7, #24]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	8b3b      	ldrh	r3, [r7, #24]
 80020f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002104:	b29b      	uxth	r3, r3
 8002106:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01f      	beq.n	8002152 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800212c:	82fb      	strh	r3, [r7, #22]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	441a      	add	r2, r3
 800213c:	8afb      	ldrh	r3, [r7, #22]
 800213e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800214a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800214e:	b29b      	uxth	r3, r3
 8002150:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002152:	8b7b      	ldrh	r3, [r7, #26]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8087 	beq.w	8002268 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	6959      	ldr	r1, [r3, #20]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	891a      	ldrh	r2, [r3, #8]
 8002166:	8b7b      	ldrh	r3, [r7, #26]
 8002168:	f004 fb27 	bl	80067ba <USB_ReadPMA>
 800216c:	e07c      	b.n	8002268 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002176:	b29b      	uxth	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	3306      	adds	r3, #6
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002196:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	8b7b      	ldrh	r3, [r7, #26]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d306      	bcc.n	80021b0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	8b7b      	ldrh	r3, [r7, #26]
 80021a8:	1ad2      	subs	r2, r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	619a      	str	r2, [r3, #24]
 80021ae:	e002      	b.n	80021b6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d123      	bne.n	8002206 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d8:	83fb      	strh	r3, [r7, #30]
 80021da:	8bfb      	ldrh	r3, [r7, #30]
 80021dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021e0:	83fb      	strh	r3, [r7, #30]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	441a      	add	r2, r3
 80021f0:	8bfb      	ldrh	r3, [r7, #30]
 80021f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002202:	b29b      	uxth	r3, r3
 8002204:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d11f      	bne.n	8002250 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800222a:	83bb      	strh	r3, [r7, #28]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	441a      	add	r2, r3
 800223a:	8bbb      	ldrh	r3, [r7, #28]
 800223c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002248:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800224c:	b29b      	uxth	r3, r3
 800224e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002250:	8b7b      	ldrh	r3, [r7, #26]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	6959      	ldr	r1, [r3, #20]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	895a      	ldrh	r2, [r3, #10]
 8002262:	8b7b      	ldrh	r3, [r7, #26]
 8002264:	f004 faa9 	bl	80067ba <USB_ReadPMA>
    }
  }

  return count;
 8002268:	8b7b      	ldrh	r3, [r7, #26]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b0a4      	sub	sp, #144	@ 0x90
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	4613      	mov	r3, r2
 800227e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 81dd 	beq.w	8002646 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	3302      	adds	r3, #2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d907      	bls.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022cc:	1ad2      	subs	r2, r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	619a      	str	r2, [r3, #24]
 80022d2:	e002      	b.n	80022da <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 80b9 	bne.w	8002456 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d126      	bne.n	800233a <HAL_PCD_EP_DB_Transmit+0xc8>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002300:	4413      	add	r3, r2
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	011a      	lsls	r2, r3, #4
 800230a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230c:	4413      	add	r3, r2
 800230e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231e:	b29a      	uxth	r2, r3
 8002320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002332:	b29a      	uxth	r2, r3
 8002334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	e01a      	b.n	8002370 <HAL_PCD_EP_DB_Transmit+0xfe>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d116      	bne.n	8002370 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	637b      	str	r3, [r7, #52]	@ 0x34
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002350:	b29b      	uxth	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002356:	4413      	add	r3, r2
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	011a      	lsls	r2, r3, #4
 8002360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002362:	4413      	add	r3, r2
 8002364:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002368:	633b      	str	r3, [r7, #48]	@ 0x30
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	2200      	movs	r2, #0
 800236e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d126      	bne.n	80023cc <HAL_PCD_EP_DB_Transmit+0x15a>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800238c:	b29b      	uxth	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	4413      	add	r3, r2
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	011a      	lsls	r2, r3, #4
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	e017      	b.n	80023fc <HAL_PCD_EP_DB_Transmit+0x18a>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d113      	bne.n	80023fc <HAL_PCD_EP_DB_Transmit+0x18a>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	4413      	add	r3, r2
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	011a      	lsls	r2, r3, #4
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	4413      	add	r3, r2
 80023f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	2200      	movs	r2, #0
 80023fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f006 f805 	bl	8008412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 82fc 	beq.w	8002a0c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800242a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800242e:	82fb      	strh	r3, [r7, #22]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	441a      	add	r2, r3
 800243e:	8afb      	ldrh	r3, [r7, #22]
 8002440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800244c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002450:	b29b      	uxth	r3, r3
 8002452:	8013      	strh	r3, [r2, #0]
 8002454:	e2da      	b.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d021      	beq.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800247a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	441a      	add	r2, r3
 800248c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800249c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f040 82ae 	bne.w	8002a0c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024b8:	441a      	add	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024c6:	441a      	add	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d30b      	bcc.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	6a1a      	ldr	r2, [r3, #32]
 80024e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024e8:	1ad2      	subs	r2, r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	621a      	str	r2, [r3, #32]
 80024ee:	e017      	b.n	8002520 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d108      	bne.n	800250a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80024f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002508:	e00a      	b.n	8002520 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d165      	bne.n	80025f4 <HAL_PCD_EP_DB_Transmit+0x382>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800253c:	4413      	add	r3, r2
 800253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	011a      	lsls	r2, r3, #4
 8002546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002548:	4413      	add	r3, r2
 800254a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800254e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255a:	b29a      	uxth	r2, r3
 800255c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255e:	801a      	strh	r2, [r3, #0]
 8002560:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002564:	2b3e      	cmp	r3, #62	@ 0x3e
 8002566:	d91d      	bls.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x332>
 8002568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_PCD_EP_DB_Transmit+0x310>
 800257c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800257e:	3b01      	subs	r3, #1
 8002580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b29a      	uxth	r2, r3
 8002588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800258a:	b29b      	uxth	r3, r3
 800258c:	029b      	lsls	r3, r3, #10
 800258e:	b29b      	uxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	b29b      	uxth	r3, r3
 8002594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259c:	b29a      	uxth	r2, r3
 800259e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	e044      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_PCD_EP_DB_Transmit+0x350>
 80025ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	e035      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_PCD_EP_DB_Transmit+0x36a>
 80025d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025d8:	3301      	adds	r3, #1
 80025da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	029b      	lsls	r3, r3, #10
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	e01c      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d118      	bne.n	800262e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	647b      	str	r3, [r7, #68]	@ 0x44
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002610:	4413      	add	r3, r2
 8002612:	647b      	str	r3, [r7, #68]	@ 0x44
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	011a      	lsls	r2, r3, #4
 800261a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800261c:	4413      	add	r3, r2
 800261e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002622:	643b      	str	r3, [r7, #64]	@ 0x40
 8002624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002628:	b29a      	uxth	r2, r3
 800262a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800262c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6959      	ldr	r1, [r3, #20]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	891a      	ldrh	r2, [r3, #8]
 800263a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800263e:	b29b      	uxth	r3, r3
 8002640:	f004 f875 	bl	800672e <USB_WritePMA>
 8002644:	e1e2      	b.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	3306      	adds	r3, #6
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800267a:	429a      	cmp	r2, r3
 800267c:	d307      	bcc.n	800268e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002686:	1ad2      	subs	r2, r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	619a      	str	r2, [r3, #24]
 800268c:	e002      	b.n	8002694 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 80c0 	bne.w	800281e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d126      	bne.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x482>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026ba:	4413      	add	r3, r2
 80026bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	011a      	lsls	r2, r3, #4
 80026c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026c6:	4413      	add	r3, r2
 80026c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d8:	b29a      	uxth	r2, r3
 80026da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	e01a      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d116      	bne.n	800272a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	667b      	str	r3, [r7, #100]	@ 0x64
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002710:	4413      	add	r3, r2
 8002712:	667b      	str	r3, [r7, #100]	@ 0x64
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	011a      	lsls	r2, r3, #4
 800271a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800271c:	4413      	add	r3, r2
 800271e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002722:	663b      	str	r3, [r7, #96]	@ 0x60
 8002724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002726:	2200      	movs	r2, #0
 8002728:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d12b      	bne.n	8002790 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800274c:	4413      	add	r3, r2
 800274e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	011a      	lsls	r2, r3, #4
 8002756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002758:	4413      	add	r3, r2
 800275a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800275e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002762:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276e:	b29a      	uxth	r2, r3
 8002770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002774:	801a      	strh	r2, [r3, #0]
 8002776:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002786:	b29a      	uxth	r2, r3
 8002788:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	e017      	b.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d113      	bne.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a6:	4413      	add	r3, r2
 80027a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	011a      	lsls	r2, r3, #4
 80027b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b2:	4413      	add	r3, r2
 80027b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80027ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027bc:	2200      	movs	r2, #0
 80027be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f005 fe23 	bl	8008412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 811a 	bne.w	8002a0c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	441a      	add	r2, r3
 8002804:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800280c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002810:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002818:	b29b      	uxth	r3, r3
 800281a:	8013      	strh	r3, [r2, #0]
 800281c:	e0f6      	b.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d121      	bne.n	800286c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800283e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002842:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	441a      	add	r2, r3
 8002854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800285c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002860:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002868:	b29b      	uxth	r3, r3
 800286a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002872:	2b01      	cmp	r3, #1
 8002874:	f040 80ca 	bne.w	8002a0c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002880:	441a      	add	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800288e:	441a      	add	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d30b      	bcc.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	6a1a      	ldr	r2, [r3, #32]
 80028ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b0:	1ad2      	subs	r2, r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	621a      	str	r2, [r3, #32]
 80028b6:	e017      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d108      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80028c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028d0:	e00a      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d165      	bne.n	80029c2 <HAL_PCD_EP_DB_Transmit+0x750>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002904:	b29b      	uxth	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800290a:	4413      	add	r3, r2
 800290c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	011a      	lsls	r2, r3, #4
 8002914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002916:	4413      	add	r3, r2
 8002918:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800291c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800291e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002928:	b29a      	uxth	r2, r3
 800292a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800292c:	801a      	strh	r2, [r3, #0]
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002932:	2b3e      	cmp	r3, #62	@ 0x3e
 8002934:	d91d      	bls.n	8002972 <HAL_PCD_EP_DB_Transmit+0x700>
 8002936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2b00      	cmp	r3, #0
 8002948:	d102      	bne.n	8002950 <HAL_PCD_EP_DB_Transmit+0x6de>
 800294a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800294c:	3b01      	subs	r3, #1
 800294e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29a      	uxth	r2, r3
 8002956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002958:	b29b      	uxth	r3, r3
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	b29b      	uxth	r3, r3
 800295e:	4313      	orrs	r3, r2
 8002960:	b29b      	uxth	r3, r3
 8002962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800296a:	b29a      	uxth	r2, r3
 800296c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	e041      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0x71e>
 800297a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002988:	b29a      	uxth	r2, r3
 800298a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	e032      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_PCD_EP_DB_Transmit+0x738>
 80029a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029a6:	3301      	adds	r3, #1
 80029a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	029b      	lsls	r3, r3, #10
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4313      	orrs	r3, r2
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029be:	801a      	strh	r2, [r3, #0]
 80029c0:	e019      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x784>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d115      	bne.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x784>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d8:	4413      	add	r3, r2
 80029da:	657b      	str	r3, [r7, #84]	@ 0x54
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	011a      	lsls	r2, r3, #4
 80029e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80029ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80029ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	6959      	ldr	r1, [r3, #20]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	895a      	ldrh	r2, [r3, #10]
 8002a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f003 fe91 	bl	800672e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a26:	82bb      	strh	r3, [r7, #20]
 8002a28:	8abb      	ldrh	r3, [r7, #20]
 8002a2a:	f083 0310 	eor.w	r3, r3, #16
 8002a2e:	82bb      	strh	r3, [r7, #20]
 8002a30:	8abb      	ldrh	r3, [r7, #20]
 8002a32:	f083 0320 	eor.w	r3, r3, #32
 8002a36:	82bb      	strh	r3, [r7, #20]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	8abb      	ldrh	r3, [r7, #20]
 8002a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3790      	adds	r7, #144	@ 0x90
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b087      	sub	sp, #28
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	817b      	strh	r3, [r7, #10]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a78:	897b      	ldrh	r3, [r7, #10]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a84:	897b      	ldrh	r3, [r7, #10]
 8002a86:	f003 0207 	and.w	r2, r3, #7
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	3310      	adds	r3, #16
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e009      	b.n	8002ab0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a9c:	897a      	ldrh	r2, [r7, #10]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4413      	add	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ab0:	893b      	ldrh	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	80da      	strh	r2, [r3, #6]
 8002ac4:	e00b      	b.n	8002ade <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e272      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8087 	beq.w	8002c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0c:	4b92      	ldr	r3, [pc, #584]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d00c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b18:	4b8f      	ldr	r3, [pc, #572]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d112      	bne.n	8002b4a <HAL_RCC_OscConfig+0x5e>
 8002b24:	4b8c      	ldr	r3, [pc, #560]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b30:	d10b      	bne.n	8002b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b32:	4b89      	ldr	r3, [pc, #548]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d06c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x12c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d168      	bne.n	8002c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e24c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x76>
 8002b54:	4b80      	ldr	r3, [pc, #512]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a7f      	ldr	r2, [pc, #508]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e02e      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd4>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x98>
 8002b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b78      	ldr	r3, [pc, #480]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a77      	ldr	r2, [pc, #476]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e01d      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd4>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xbc>
 8002b8e:	4b72      	ldr	r3, [pc, #456]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a71      	ldr	r2, [pc, #452]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd4>
 8002ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6a      	ldr	r2, [pc, #424]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b68      	ldr	r3, [pc, #416]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a67      	ldr	r2, [pc, #412]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fd ff3e 	bl	8000a48 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fd ff3a 	bl	8000a48 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e200      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xe4>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fd ff2a 	bl	8000a48 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fd ff26 	bl	8000a48 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1ec      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	4b53      	ldr	r3, [pc, #332]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x10c>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d063      	beq.n	8002cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c26:	4b4c      	ldr	r3, [pc, #304]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c32:	4b49      	ldr	r3, [pc, #292]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d11c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x18c>
 8002c3e:	4b46      	ldr	r3, [pc, #280]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	4b43      	ldr	r3, [pc, #268]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x176>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e1c0      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4939      	ldr	r1, [pc, #228]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	e03a      	b.n	8002cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d020      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c80:	4b36      	ldr	r3, [pc, #216]	@ (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fd fedf 	bl	8000a48 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fd fedb 	bl	8000a48 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e1a1      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b2a      	ldr	r3, [pc, #168]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4927      	ldr	r1, [pc, #156]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
 8002cc0:	e015      	b.n	8002cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc2:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fd febe 	bl	8000a48 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7fd feba 	bl	8000a48 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e180      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d03a      	beq.n	8002d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d019      	beq.n	8002d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d02:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <HAL_RCC_OscConfig+0x274>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d08:	f7fd fe9e 	bl	8000a48 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d10:	f7fd fe9a 	bl	8000a48 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e160      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f000 fa9c 	bl	800326c <RCC_Delay>
 8002d34:	e01c      	b.n	8002d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_RCC_OscConfig+0x274>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3c:	f7fd fe84 	bl	8000a48 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d42:	e00f      	b.n	8002d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fd fe80 	bl	8000a48 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d908      	bls.n	8002d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e146      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	42420000 	.word	0x42420000
 8002d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	4b92      	ldr	r3, [pc, #584]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e9      	bne.n	8002d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80a6 	beq.w	8002eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d82:	4b8b      	ldr	r3, [pc, #556]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10d      	bne.n	8002daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	4b88      	ldr	r3, [pc, #544]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4a87      	ldr	r2, [pc, #540]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d98:	61d3      	str	r3, [r2, #28]
 8002d9a:	4b85      	ldr	r3, [pc, #532]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b82      	ldr	r3, [pc, #520]	@ (8002fb4 <HAL_RCC_OscConfig+0x4c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d118      	bne.n	8002de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fb4 <HAL_RCC_OscConfig+0x4c8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7e      	ldr	r2, [pc, #504]	@ (8002fb4 <HAL_RCC_OscConfig+0x4c8>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc2:	f7fd fe41 	bl	8000a48 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dca:	f7fd fe3d 	bl	8000a48 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b64      	cmp	r3, #100	@ 0x64
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e103      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	4b75      	ldr	r3, [pc, #468]	@ (8002fb4 <HAL_RCC_OscConfig+0x4c8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x312>
 8002df0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4a6e      	ldr	r2, [pc, #440]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6213      	str	r3, [r2, #32]
 8002dfc:	e02d      	b.n	8002e5a <HAL_RCC_OscConfig+0x36e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x334>
 8002e06:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4a69      	ldr	r2, [pc, #420]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6213      	str	r3, [r2, #32]
 8002e12:	4b67      	ldr	r3, [pc, #412]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4a66      	ldr	r2, [pc, #408]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	6213      	str	r3, [r2, #32]
 8002e1e:	e01c      	b.n	8002e5a <HAL_RCC_OscConfig+0x36e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x356>
 8002e28:	4b61      	ldr	r3, [pc, #388]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4a60      	ldr	r2, [pc, #384]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6213      	str	r3, [r2, #32]
 8002e34:	4b5e      	ldr	r3, [pc, #376]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	e00b      	b.n	8002e5a <HAL_RCC_OscConfig+0x36e>
 8002e42:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4a5a      	ldr	r2, [pc, #360]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6213      	str	r3, [r2, #32]
 8002e4e:	4b58      	ldr	r3, [pc, #352]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a57      	ldr	r2, [pc, #348]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d015      	beq.n	8002e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fd fdf1 	bl	8000a48 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fd fded 	bl	8000a48 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0b1      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ee      	beq.n	8002e6a <HAL_RCC_OscConfig+0x37e>
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8e:	f7fd fddb 	bl	8000a48 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fd fdd7 	bl	8000a48 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e09b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eac:	4b40      	ldr	r3, [pc, #256]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8087 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed4:	4b36      	ldr	r3, [pc, #216]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d061      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d146      	bne.n	8002f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b33      	ldr	r3, [pc, #204]	@ (8002fb8 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fd fdab 	bl	8000a48 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fd fda7 	bl	8000a48 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e06d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f08:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1c:	d108      	bne.n	8002f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f1e:	4b24      	ldr	r3, [pc, #144]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4921      	ldr	r1, [pc, #132]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f30:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a19      	ldr	r1, [r3, #32]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	430b      	orrs	r3, r1
 8002f42:	491b      	ldr	r1, [pc, #108]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f48:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <HAL_RCC_OscConfig+0x4cc>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fd fd7b 	bl	8000a48 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fd fd77 	bl	8000a48 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e03d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x46a>
 8002f74:	e035      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <HAL_RCC_OscConfig+0x4cc>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fd fd64 	bl	8000a48 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fd fd60 	bl	8000a48 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e026      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x498>
 8002fa2:	e01e      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e019      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_OscConfig+0x500>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0d0      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b6a      	ldr	r3, [pc, #424]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d910      	bls.n	8003034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b67      	ldr	r3, [pc, #412]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 0207 	bic.w	r2, r3, #7
 800301a:	4965      	ldr	r1, [pc, #404]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b63      	ldr	r3, [pc, #396]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b8      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800304c:	4b59      	ldr	r3, [pc, #356]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a58      	ldr	r2, [pc, #352]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003056:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003064:	4b53      	ldr	r3, [pc, #332]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a52      	ldr	r2, [pc, #328]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800306e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003070:	4b50      	ldr	r3, [pc, #320]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	494d      	ldr	r1, [pc, #308]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d040      	beq.n	8003110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b47      	ldr	r3, [pc, #284]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d115      	bne.n	80030ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e07f      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ae:	4b41      	ldr	r3, [pc, #260]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e073      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030be:	4b3d      	ldr	r3, [pc, #244]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06b      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ce:	4b39      	ldr	r3, [pc, #228]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f023 0203 	bic.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4936      	ldr	r1, [pc, #216]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e0:	f7fd fcb2 	bl	8000a48 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e8:	f7fd fcae 	bl	8000a48 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e053      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	4b2d      	ldr	r3, [pc, #180]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 020c 	and.w	r2, r3, #12
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	429a      	cmp	r2, r3
 800310e:	d1eb      	bne.n	80030e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003110:	4b27      	ldr	r3, [pc, #156]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d210      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 0207 	bic.w	r2, r3, #7
 8003126:	4922      	ldr	r1, [pc, #136]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e032      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4916      	ldr	r1, [pc, #88]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	490e      	ldr	r1, [pc, #56]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317e:	f000 f821 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8003182:	4602      	mov	r2, r0
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	490a      	ldr	r1, [pc, #40]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	5ccb      	ldrb	r3, [r1, r3]
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	4a09      	ldr	r2, [pc, #36]	@ (80031bc <HAL_RCC_ClockConfig+0x1cc>)
 8003198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800319a:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <HAL_RCC_ClockConfig+0x1d0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fc10 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40022000 	.word	0x40022000
 80031b4:	40021000 	.word	0x40021000
 80031b8:	080092d0 	.word	0x080092d0
 80031bc:	20000000 	.word	0x20000000
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031de:	4b1e      	ldr	r3, [pc, #120]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x94>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d002      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x30>
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x36>
 80031f2:	e027      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031f4:	4b19      	ldr	r3, [pc, #100]	@ (800325c <HAL_RCC_GetSysClockFreq+0x98>)
 80031f6:	613b      	str	r3, [r7, #16]
      break;
 80031f8:	e027      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	0c9b      	lsrs	r3, r3, #18
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003212:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x94>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0c5b      	lsrs	r3, r3, #17
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	4a11      	ldr	r2, [pc, #68]	@ (8003264 <HAL_RCC_GetSysClockFreq+0xa0>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <HAL_RCC_GetSysClockFreq+0x98>)
 8003226:	fb03 f202 	mul.w	r2, r3, r2
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e004      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a0c      	ldr	r2, [pc, #48]	@ (8003268 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	613b      	str	r3, [r7, #16]
      break;
 8003242:	e002      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_RCC_GetSysClockFreq+0x98>)
 8003246:	613b      	str	r3, [r7, #16]
      break;
 8003248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324a:	693b      	ldr	r3, [r7, #16]
}
 800324c:	4618      	mov	r0, r3
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	007a1200 	.word	0x007a1200
 8003260:	080092e0 	.word	0x080092e0
 8003264:	080092f0 	.word	0x080092f0
 8003268:	003d0900 	.word	0x003d0900

0800326c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003274:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <RCC_Delay+0x34>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <RCC_Delay+0x38>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0a5b      	lsrs	r3, r3, #9
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003288:	bf00      	nop
  }
  while (Delay --);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	60fa      	str	r2, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f9      	bne.n	8003288 <RCC_Delay+0x1c>
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	20000000 	.word	0x20000000
 80032a4:	10624dd3 	.word	0x10624dd3

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d07d      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10d      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032de:	61d3      	str	r3, [r2, #28]
 80032e0:	4b49      	ldr	r3, [pc, #292]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b46      	ldr	r3, [pc, #280]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d118      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fc:	4b43      	ldr	r3, [pc, #268]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a42      	ldr	r2, [pc, #264]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003306:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003308:	f7fd fb9e 	bl	8000a48 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	e008      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003310:	f7fd fb9a 	bl	8000a48 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	@ 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e06d      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b3a      	ldr	r3, [pc, #232]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332e:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003336:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d02e      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	429a      	cmp	r2, r3
 800334a:	d027      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800334c:	4b2e      	ldr	r3, [pc, #184]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003354:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003356:	4b2e      	ldr	r3, [pc, #184]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800335c:	4b2c      	ldr	r3, [pc, #176]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003362:	4a29      	ldr	r2, [pc, #164]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d014      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fd fb69 	bl	8000a48 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd fb65 	bl	8000a48 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e036      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	4b1d      	ldr	r3, [pc, #116]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ee      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800339c:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4917      	ldr	r1, [pc, #92]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b4:	4b14      	ldr	r3, [pc, #80]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4a13      	ldr	r2, [pc, #76]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	490b      	ldr	r1, [pc, #44]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ea:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	4904      	ldr	r1, [pc, #16]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	40007000 	.word	0x40007000
 8003410:	42420440 	.word	0x42420440

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fa0e 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 fb6e 	bl	8003b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e03a      	b.n	8003542 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_TIM_Base_Start_IT+0x98>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f6:	d009      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_TIM_Base_Start_IT+0x9c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <HAL_TIM_Base_Start_IT+0xa0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d010      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	e007      	b.n	8003540 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e041      	b.n	80035ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd f992 	bl	80008a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 facc 	bl	8003b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01b      	beq.n	800365a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0202 	mvn.w	r2, #2
 800362a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa5b 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 8003646:	e005      	b.n	8003654 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fa4e 	bl	8003aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa5d 	bl	8003b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01b      	beq.n	80036a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f06f 0204 	mvn.w	r2, #4
 8003676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fa35 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 8003692:	e005      	b.n	80036a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fa28 	bl	8003aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa37 	bl	8003b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01b      	beq.n	80036f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0208 	mvn.w	r2, #8
 80036c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2204      	movs	r2, #4
 80036c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa0f 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 80036de:	e005      	b.n	80036ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fa02 	bl	8003aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa11 	bl	8003b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01b      	beq.n	800373e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f06f 0210 	mvn.w	r2, #16
 800370e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2208      	movs	r2, #8
 8003714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f9e9 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 800372a:	e005      	b.n	8003738 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f9dc 	bl	8003aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9eb 	bl	8003b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00c      	beq.n	8003762 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f06f 0201 	mvn.w	r2, #1
 800375a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fc ff0b 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00c      	beq.n	8003786 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800377e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fcca 	bl	800411a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00c      	beq.n	80037aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f9bb 	bl	8003b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f06f 0220 	mvn.w	r2, #32
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fc9d 	bl	8004108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0ae      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f200 809f 	bhi.w	8003944 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003806:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003841 	.word	0x08003841
 8003810:	08003945 	.word	0x08003945
 8003814:	08003945 	.word	0x08003945
 8003818:	08003945 	.word	0x08003945
 800381c:	08003881 	.word	0x08003881
 8003820:	08003945 	.word	0x08003945
 8003824:	08003945 	.word	0x08003945
 8003828:	08003945 	.word	0x08003945
 800382c:	080038c3 	.word	0x080038c3
 8003830:	08003945 	.word	0x08003945
 8003834:	08003945 	.word	0x08003945
 8003838:	08003945 	.word	0x08003945
 800383c:	08003903 	.word	0x08003903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f9e2 	bl	8003c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	619a      	str	r2, [r3, #24]
      break;
 800387e:	e064      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fa28 	bl	8003cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	619a      	str	r2, [r3, #24]
      break;
 80038c0:	e043      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fa71 	bl	8003db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0208 	orr.w	r2, r2, #8
 80038dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0204 	bic.w	r2, r2, #4
 80038ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]
      break;
 8003900:	e023      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fabb 	bl	8003e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69d9      	ldr	r1, [r3, #28]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	61da      	str	r2, [r3, #28]
      break;
 8003942:	e002      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	75fb      	strb	r3, [r7, #23]
      break;
 8003948:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIM_ConfigClockSource+0x1c>
 8003974:	2302      	movs	r3, #2
 8003976:	e0b4      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x186>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800399e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b0:	d03e      	beq.n	8003a30 <HAL_TIM_ConfigClockSource+0xd4>
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b6:	f200 8087 	bhi.w	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039be:	f000 8086 	beq.w	8003ace <HAL_TIM_ConfigClockSource+0x172>
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c6:	d87f      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b70      	cmp	r3, #112	@ 0x70
 80039ca:	d01a      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0xa6>
 80039cc:	2b70      	cmp	r3, #112	@ 0x70
 80039ce:	d87b      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b60      	cmp	r3, #96	@ 0x60
 80039d2:	d050      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x11a>
 80039d4:	2b60      	cmp	r3, #96	@ 0x60
 80039d6:	d877      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b50      	cmp	r3, #80	@ 0x50
 80039da:	d03c      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0xfa>
 80039dc:	2b50      	cmp	r3, #80	@ 0x50
 80039de:	d873      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b40      	cmp	r3, #64	@ 0x40
 80039e2:	d058      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x13a>
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	d86f      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e8:	2b30      	cmp	r3, #48	@ 0x30
 80039ea:	d064      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80039ec:	2b30      	cmp	r3, #48	@ 0x30
 80039ee:	d86b      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d060      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d867      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d05c      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d05a      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a00:	e062      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a12:	f000 fafc 	bl	800400e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	609a      	str	r2, [r3, #8]
      break;
 8003a2e:	e04f      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a40:	f000 fae5 	bl	800400e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a52:	609a      	str	r2, [r3, #8]
      break;
 8003a54:	e03c      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 fa5c 	bl	8003f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2150      	movs	r1, #80	@ 0x50
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fab3 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003a74:	e02c      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a82:	461a      	mov	r2, r3
 8003a84:	f000 fa7a 	bl	8003f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2160      	movs	r1, #96	@ 0x60
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 faa3 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003a94:	e01c      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f000 fa3c 	bl	8003f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2140      	movs	r1, #64	@ 0x40
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fa93 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003ab4:	e00c      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f000 fa8a 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003ac6:	e003      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      break;
 8003acc:	e000      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr
	...

08003b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a2f      	ldr	r2, [pc, #188]	@ (8003c04 <TIM_Base_SetConfig+0xd0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_Base_SetConfig+0x30>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b52:	d007      	beq.n	8003b64 <TIM_Base_SetConfig+0x30>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2c      	ldr	r2, [pc, #176]	@ (8003c08 <TIM_Base_SetConfig+0xd4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_Base_SetConfig+0x30>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c0c <TIM_Base_SetConfig+0xd8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d108      	bne.n	8003b76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a22      	ldr	r2, [pc, #136]	@ (8003c04 <TIM_Base_SetConfig+0xd0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <TIM_Base_SetConfig+0x62>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b84:	d007      	beq.n	8003b96 <TIM_Base_SetConfig+0x62>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <TIM_Base_SetConfig+0xd4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_Base_SetConfig+0x62>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1e      	ldr	r2, [pc, #120]	@ (8003c0c <TIM_Base_SetConfig+0xd8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d108      	bne.n	8003ba8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0d      	ldr	r2, [pc, #52]	@ (8003c04 <TIM_Base_SetConfig+0xd0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d103      	bne.n	8003bdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f023 0201 	bic.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	611a      	str	r2, [r3, #16]
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800

08003c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f023 0201 	bic.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 0302 	bic.w	r3, r3, #2
 8003c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd8 <TIM_OC1_SetConfig+0xc8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10c      	bne.n	8003c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0308 	bic.w	r3, r3, #8
 8003c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f023 0304 	bic.w	r3, r3, #4
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <TIM_OC1_SetConfig+0xc8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d111      	bne.n	8003cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40012c00 	.word	0x40012c00

08003cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f023 0210 	bic.w	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0320 	bic.w	r3, r3, #32
 8003d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a1d      	ldr	r2, [pc, #116]	@ (8003dac <TIM_OC2_SetConfig+0xd0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d10d      	bne.n	8003d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a14      	ldr	r2, [pc, #80]	@ (8003dac <TIM_OC2_SetConfig+0xd0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d113      	bne.n	8003d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	40012c00 	.word	0x40012c00

08003db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	@ (8003e80 <TIM_OC3_SetConfig+0xd0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10d      	bne.n	8003e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a14      	ldr	r2, [pc, #80]	@ (8003e80 <TIM_OC3_SetConfig+0xd0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40012c00 	.word	0x40012c00

08003e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	031b      	lsls	r3, r3, #12
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0f      	ldr	r2, [pc, #60]	@ (8003f1c <TIM_OC4_SetConfig+0x98>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d109      	bne.n	8003ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	019b      	lsls	r3, r3, #6
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	40012c00 	.word	0x40012c00

08003f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0201 	bic.w	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 030a 	bic.w	r3, r3, #10
 8003f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0210 	bic.w	r2, r3, #16
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	031b      	lsls	r3, r3, #12
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	621a      	str	r2, [r3, #32]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f043 0307 	orr.w	r3, r3, #7
 8003ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	609a      	str	r2, [r3, #8]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	021a      	lsls	r2, r3, #8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	431a      	orrs	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	609a      	str	r2, [r3, #8]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e046      	b.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a16      	ldr	r2, [pc, #88]	@ (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b0:	d009      	beq.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a10      	ldr	r2, [pc, #64]	@ (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10c      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800

08004108 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	4638      	mov	r0, r7
 8004136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004156:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800415a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004172:	b480      	push	{r7}
 8004174:	b085      	sub	sp, #20
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800417a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800417e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	b29b      	uxth	r3, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	b29b      	uxth	r3, r3
 8004190:	4013      	ands	r3, r2
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	4638      	mov	r0, r7
 80041c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b09d      	sub	sp, #116	@ 0x74
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800421a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	78db      	ldrb	r3, [r3, #3]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d81f      	bhi.n	800426a <USB_ActivateEndpoint+0x72>
 800422a:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <USB_ActivateEndpoint+0x38>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004241 	.word	0x08004241
 8004234:	0800425d 	.word	0x0800425d
 8004238:	08004273 	.word	0x08004273
 800423c:	0800424f 	.word	0x0800424f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004240:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004244:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004248:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800424c:	e012      	b.n	8004274 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800424e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004252:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004256:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800425a:	e00b      	b.n	8004274 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800425c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004264:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004268:	e004      	b.n	8004274 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004270:	e000      	b.n	8004274 <USB_ActivateEndpoint+0x7c>
      break;
 8004272:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	441a      	add	r2, r3
 800427e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800428e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80042c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	7b1b      	ldrb	r3, [r3, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 8178 	bne.w	80045d4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8084 	beq.w	80043f6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	4413      	add	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	011a      	lsls	r2, r3, #4
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	88db      	ldrh	r3, [r3, #6]
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	b29b      	uxth	r3, r3
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	827b      	strh	r3, [r7, #18]
 8004330:	8a7b      	ldrh	r3, [r7, #18]
 8004332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01b      	beq.n	8004372 <USB_ActivateEndpoint+0x17a>
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800434c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004350:	823b      	strh	r3, [r7, #16]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	8a3b      	ldrh	r3, [r7, #16]
 800435e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800436a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	78db      	ldrb	r3, [r3, #3]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d020      	beq.n	80043bc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004390:	81bb      	strh	r3, [r7, #12]
 8004392:	89bb      	ldrh	r3, [r7, #12]
 8004394:	f083 0320 	eor.w	r3, r3, #32
 8004398:	81bb      	strh	r3, [r7, #12]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	441a      	add	r2, r3
 80043a4:	89bb      	ldrh	r3, [r7, #12]
 80043a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	8013      	strh	r3, [r2, #0]
 80043ba:	e2d5      	b.n	8004968 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d2:	81fb      	strh	r3, [r7, #14]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	89fb      	ldrh	r3, [r7, #14]
 80043e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	8013      	strh	r3, [r2, #0]
 80043f4:	e2b8      	b.n	8004968 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	4413      	add	r3, r2
 8004408:	633b      	str	r3, [r7, #48]	@ 0x30
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	011a      	lsls	r2, r3, #4
 8004410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004412:	4413      	add	r3, r2
 8004414:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	88db      	ldrh	r3, [r3, #6]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004428:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004434:	b29b      	uxth	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443a:	4413      	add	r3, r2
 800443c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	011a      	lsls	r2, r3, #4
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	4413      	add	r3, r2
 8004448:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004458:	b29a      	uxth	r2, r3
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b3e      	cmp	r3, #62	@ 0x3e
 8004464:	d91d      	bls.n	80044a2 <USB_ActivateEndpoint+0x2aa>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <USB_ActivateEndpoint+0x288>
 800447a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800447c:	3b01      	subs	r3, #1
 800447e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29a      	uxth	r2, r3
 8004486:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004488:	b29b      	uxth	r3, r3
 800448a:	029b      	lsls	r3, r3, #10
 800448c:	b29b      	uxth	r3, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449a:	b29a      	uxth	r2, r3
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	e026      	b.n	80044f0 <USB_ActivateEndpoint+0x2f8>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <USB_ActivateEndpoint+0x2c8>
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	e017      	b.n	80044f0 <USB_ActivateEndpoint+0x2f8>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <USB_ActivateEndpoint+0x2e2>
 80044d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044d6:	3301      	adds	r3, #1
 80044d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	029b      	lsls	r3, r3, #10
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	4313      	orrs	r3, r2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80044fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01b      	beq.n	8004540 <USB_ActivateEndpoint+0x348>
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800451a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451e:	843b      	strh	r3, [r7, #32]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	8c3b      	ldrh	r3, [r7, #32]
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004534:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d124      	bne.n	8004592 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800455a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455e:	83bb      	strh	r3, [r7, #28]
 8004560:	8bbb      	ldrh	r3, [r7, #28]
 8004562:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004566:	83bb      	strh	r3, [r7, #28]
 8004568:	8bbb      	ldrh	r3, [r7, #28]
 800456a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800456e:	83bb      	strh	r3, [r7, #28]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	8bbb      	ldrh	r3, [r7, #28]
 800457c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004580:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800458c:	b29b      	uxth	r3, r3
 800458e:	8013      	strh	r3, [r2, #0]
 8004590:	e1ea      	b.n	8004968 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a8:	83fb      	strh	r3, [r7, #30]
 80045aa:	8bfb      	ldrh	r3, [r7, #30]
 80045ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045b0:	83fb      	strh	r3, [r7, #30]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	8bfb      	ldrh	r3, [r7, #30]
 80045be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]
 80045d2:	e1c9      	b.n	8004968 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	78db      	ldrb	r3, [r3, #3]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d11e      	bne.n	800461a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800460c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]
 8004618:	e01d      	b.n	8004656 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800462c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004630:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800464e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004660:	b29b      	uxth	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004666:	4413      	add	r3, r2
 8004668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	011a      	lsls	r2, r3, #4
 8004670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004672:	4413      	add	r3, r2
 8004674:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004678:	65bb      	str	r3, [r7, #88]	@ 0x58
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	891b      	ldrh	r3, [r3, #8]
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	b29b      	uxth	r3, r3
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	657b      	str	r3, [r7, #84]	@ 0x54
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004694:	b29b      	uxth	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469a:	4413      	add	r3, r2
 800469c:	657b      	str	r3, [r7, #84]	@ 0x54
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	011a      	lsls	r2, r3, #4
 80046a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80046ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	895b      	ldrh	r3, [r3, #10]
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046bc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 8093 	bne.w	80047ee <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80046d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80046dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <USB_ActivateEndpoint+0x524>
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800470c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004710:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004718:	b29b      	uxth	r3, r3
 800471a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800472a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800472c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01b      	beq.n	800476c <USB_ActivateEndpoint+0x574>
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800475c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004764:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004768:	b29b      	uxth	r3, r3
 800476a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800477e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004782:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004784:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004786:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800478a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800478c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800478e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004792:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80047a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	8013      	strh	r3, [r2, #0]
 80047ec:	e0bc      	b.n	8004968 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80047fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01d      	beq.n	8004846 <USB_ActivateEndpoint+0x64e>
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800481c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004820:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800483a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800483e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004842:	b29b      	uxth	r3, r3
 8004844:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004856:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800485a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01d      	beq.n	800489e <USB_ActivateEndpoint+0x6a6>
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004878:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800488a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004896:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	78db      	ldrb	r3, [r3, #3]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d024      	beq.n	80048f0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80048c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80048c4:	f083 0320 	eor.w	r3, r3, #32
 80048c8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004906:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800491c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004928:	b29b      	uxth	r3, r3
 800492a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800493e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004942:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800495c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004968:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800496c:	4618      	mov	r0, r3
 800496e:	3774      	adds	r7, #116	@ 0x74
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop

08004978 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004978:	b480      	push	{r7}
 800497a:	b08d      	sub	sp, #52	@ 0x34
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	7b1b      	ldrb	r3, [r3, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 808e 	bne.w	8004aa8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	785b      	ldrb	r3, [r3, #1]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d044      	beq.n	8004a1e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	81bb      	strh	r3, [r7, #12]
 80049a2:	89bb      	ldrh	r3, [r7, #12]
 80049a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01b      	beq.n	80049e4 <USB_DeactivateEndpoint+0x6c>
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c2:	817b      	strh	r3, [r7, #10]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	897b      	ldrh	r3, [r7, #10]
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049fa:	813b      	strh	r3, [r7, #8]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	893b      	ldrh	r3, [r7, #8]
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
 8004a1c:	e192      	b.n	8004d44 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	827b      	strh	r3, [r7, #18]
 8004a2c:	8a7b      	ldrh	r3, [r7, #18]
 8004a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01b      	beq.n	8004a6e <USB_DeactivateEndpoint+0xf6>
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4c:	823b      	strh	r3, [r7, #16]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	441a      	add	r2, r3
 8004a58:	8a3b      	ldrh	r3, [r7, #16]
 8004a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a84:	81fb      	strh	r3, [r7, #14]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	89fb      	ldrh	r3, [r7, #14]
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]
 8004aa6:	e14d      	b.n	8004d44 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 80a5 	bne.w	8004bfc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	843b      	strh	r3, [r7, #32]
 8004ac0:	8c3b      	ldrh	r3, [r7, #32]
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01b      	beq.n	8004b02 <USB_DeactivateEndpoint+0x18a>
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae0:	83fb      	strh	r3, [r7, #30]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	441a      	add	r2, r3
 8004aec:	8bfb      	ldrh	r3, [r7, #30]
 8004aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	83bb      	strh	r3, [r7, #28]
 8004b10:	8bbb      	ldrh	r3, [r7, #28]
 8004b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01b      	beq.n	8004b52 <USB_DeactivateEndpoint+0x1da>
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b30:	837b      	strh	r3, [r7, #26]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	8b7b      	ldrh	r3, [r7, #26]
 8004b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b68:	833b      	strh	r3, [r7, #24]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8b3b      	ldrh	r3, [r7, #24]
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba0:	82fb      	strh	r3, [r7, #22]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	8afb      	ldrh	r3, [r7, #22]
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bd8:	82bb      	strh	r3, [r7, #20]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	441a      	add	r2, r3
 8004be4:	8abb      	ldrh	r3, [r7, #20]
 8004be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	8013      	strh	r3, [r2, #0]
 8004bfa:	e0a3      	b.n	8004d44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004c0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01b      	beq.n	8004c4c <USB_DeactivateEndpoint+0x2d4>
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	441a      	add	r2, r3
 8004c36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004c5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <USB_DeactivateEndpoint+0x324>
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	441a      	add	r2, r3
 8004c86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d22:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3734      	adds	r7, #52	@ 0x34
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b0c2      	sub	sp, #264	@ 0x108
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d5e:	6018      	str	r0, [r3, #0]
 8004d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d68:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	f040 86b7 	bne.w	8005aea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d908      	bls.n	8004daa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004da8:	e007      	b.n	8004dba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	7b1b      	ldrb	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d13a      	bne.n	8004e40 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6959      	ldr	r1, [r3, #20]
 8004dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	88da      	ldrh	r2, [r3, #6]
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004dec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004df0:	6800      	ldr	r0, [r0, #0]
 8004df2:	f001 fc9c 	bl	800672e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	011a      	lsls	r2, r3, #4
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	f000 be1f 	b.w	8005a7e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	f040 8462 	bne.w	8005716 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f240 83df 	bls.w	800562e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e96:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004edc:	1ad2      	subs	r2, r2, r3
 8004ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 81c7 	beq.w	80052a0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d177      	bne.n	800501e <USB_EPStartXfer+0x2ce>
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	4413      	add	r3, r2
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	011a      	lsls	r2, r3, #4
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	4413      	add	r3, r2
 8004f64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f80:	d921      	bls.n	8004fc6 <USB_EPStartXfer+0x276>
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <USB_EPStartXfer+0x252>
 8004f98:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	029b      	lsls	r3, r3, #10
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	e050      	b.n	8005068 <USB_EPStartXfer+0x318>
 8004fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <USB_EPStartXfer+0x294>
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	e041      	b.n	8005068 <USB_EPStartXfer+0x318>
 8004fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <USB_EPStartXfer+0x2b4>
 8004ffa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004ffe:	3301      	adds	r3, #1
 8005000:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29a      	uxth	r2, r3
 800500a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800500e:	b29b      	uxth	r3, r3
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	b29b      	uxth	r3, r3
 8005014:	4313      	orrs	r3, r2
 8005016:	b29a      	uxth	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e024      	b.n	8005068 <USB_EPStartXfer+0x318>
 800501e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d11c      	bne.n	8005068 <USB_EPStartXfer+0x318>
 800502e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800503c:	b29b      	uxth	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	4413      	add	r3, r2
 8005044:	633b      	str	r3, [r7, #48]	@ 0x30
 8005046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800504a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	011a      	lsls	r2, r3, #4
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	4413      	add	r3, r2
 8005058:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800505c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800505e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005062:	b29a      	uxth	r2, r3
 8005064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005066:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	895b      	ldrh	r3, [r3, #10]
 8005074:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6959      	ldr	r1, [r3, #20]
 8005084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005088:	b29b      	uxth	r3, r3
 800508a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800508e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005092:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005096:	6800      	ldr	r0, [r0, #0]
 8005098:	f001 fb49 	bl	800672e <USB_WritePMA>
            ep->xfer_buff += len;
 800509c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ac:	441a      	add	r2, r3
 80050ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d90f      	bls.n	80050f6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80050d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	621a      	str	r2, [r3, #32]
 80050f4:	e00e      	b.n	8005114 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80050f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2200      	movs	r2, #0
 8005112:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d177      	bne.n	8005214 <USB_EPStartXfer+0x4c4>
 8005124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	4413      	add	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	011a      	lsls	r2, r3, #4
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	4413      	add	r3, r2
 800515a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800516a:	b29a      	uxth	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005174:	2b3e      	cmp	r3, #62	@ 0x3e
 8005176:	d921      	bls.n	80051bc <USB_EPStartXfer+0x46c>
 8005178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <USB_EPStartXfer+0x448>
 800518e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005192:	3b01      	subs	r3, #1
 8005194:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29a      	uxth	r2, r3
 800519e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	029b      	lsls	r3, r3, #10
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4313      	orrs	r3, r2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	e056      	b.n	800526a <USB_EPStartXfer+0x51a>
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <USB_EPStartXfer+0x48a>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e047      	b.n	800526a <USB_EPStartXfer+0x51a>
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <USB_EPStartXfer+0x4aa>
 80051f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f4:	3301      	adds	r3, #1
 80051f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005204:	b29b      	uxth	r3, r3
 8005206:	029b      	lsls	r3, r3, #10
 8005208:	b29b      	uxth	r3, r3
 800520a:	4313      	orrs	r3, r2
 800520c:	b29a      	uxth	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e02a      	b.n	800526a <USB_EPStartXfer+0x51a>
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d122      	bne.n	800526a <USB_EPStartXfer+0x51a>
 8005224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	4413      	add	r3, r2
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	011a      	lsls	r2, r3, #4
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	4413      	add	r3, r2
 800525a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005264:	b29a      	uxth	r2, r3
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800526a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	891b      	ldrh	r3, [r3, #8]
 8005276:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800527a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6959      	ldr	r1, [r3, #20]
 8005286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800528a:	b29b      	uxth	r3, r3
 800528c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005290:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005294:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005298:	6800      	ldr	r0, [r0, #0]
 800529a:	f001 fa48 	bl	800672e <USB_WritePMA>
 800529e:	e3ee      	b.n	8005a7e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d177      	bne.n	80053a0 <USB_EPStartXfer+0x650>
 80052b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052d0:	4413      	add	r3, r2
 80052d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	011a      	lsls	r2, r3, #4
 80052e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052e4:	4413      	add	r3, r2
 80052e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005300:	2b3e      	cmp	r3, #62	@ 0x3e
 8005302:	d921      	bls.n	8005348 <USB_EPStartXfer+0x5f8>
 8005304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <USB_EPStartXfer+0x5d4>
 800531a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800531e:	3b01      	subs	r3, #1
 8005320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29a      	uxth	r2, r3
 800532a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800532e:	b29b      	uxth	r3, r3
 8005330:	029b      	lsls	r3, r3, #10
 8005332:	b29b      	uxth	r3, r3
 8005334:	4313      	orrs	r3, r2
 8005336:	b29b      	uxth	r3, r3
 8005338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005340:	b29a      	uxth	r2, r3
 8005342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	e056      	b.n	80053f6 <USB_EPStartXfer+0x6a6>
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <USB_EPStartXfer+0x616>
 8005350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535e:	b29a      	uxth	r2, r3
 8005360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	e047      	b.n	80053f6 <USB_EPStartXfer+0x6a6>
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <USB_EPStartXfer+0x636>
 800537c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005380:	3301      	adds	r3, #1
 8005382:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29a      	uxth	r2, r3
 800538c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005390:	b29b      	uxth	r3, r3
 8005392:	029b      	lsls	r3, r3, #10
 8005394:	b29b      	uxth	r3, r3
 8005396:	4313      	orrs	r3, r2
 8005398:	b29a      	uxth	r2, r3
 800539a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e02a      	b.n	80053f6 <USB_EPStartXfer+0x6a6>
 80053a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d122      	bne.n	80053f6 <USB_EPStartXfer+0x6a6>
 80053b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80053bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d0:	4413      	add	r3, r2
 80053d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	011a      	lsls	r2, r3, #4
 80053e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053e4:	4413      	add	r3, r2
 80053e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	891b      	ldrh	r3, [r3, #8]
 8005402:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6959      	ldr	r1, [r3, #20]
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005416:	b29b      	uxth	r3, r3
 8005418:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800541c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005420:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005424:	6800      	ldr	r0, [r0, #0]
 8005426:	f001 f982 	bl	800672e <USB_WritePMA>
            ep->xfer_buff += len;
 800542a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543a:	441a      	add	r2, r3
 800543c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	429a      	cmp	r2, r3
 8005462:	d90f      	bls.n	8005484 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005474:	1ad2      	subs	r2, r2, r3
 8005476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	621a      	str	r2, [r3, #32]
 8005482:	e00e      	b.n	80054a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d177      	bne.n	80055ae <USB_EPStartXfer+0x85e>
 80054be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054de:	4413      	add	r3, r2
 80054e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	011a      	lsls	r2, r3, #4
 80054f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005504:	b29a      	uxth	r2, r3
 8005506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005510:	d921      	bls.n	8005556 <USB_EPStartXfer+0x806>
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <USB_EPStartXfer+0x7e2>
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	3b01      	subs	r3, #1
 800552e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	b29b      	uxth	r3, r3
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	b29b      	uxth	r3, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554e:	b29a      	uxth	r2, r3
 8005550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e050      	b.n	80055f8 <USB_EPStartXfer+0x8a8>
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <USB_EPStartXfer+0x824>
 800555e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556c:	b29a      	uxth	r2, r3
 800556e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e041      	b.n	80055f8 <USB_EPStartXfer+0x8a8>
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800557e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <USB_EPStartXfer+0x844>
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558e:	3301      	adds	r3, #1
 8005590:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29a      	uxth	r2, r3
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	b29b      	uxth	r3, r3
 80055a0:	029b      	lsls	r3, r3, #10
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4313      	orrs	r3, r2
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e024      	b.n	80055f8 <USB_EPStartXfer+0x8a8>
 80055ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d11c      	bne.n	80055f8 <USB_EPStartXfer+0x8a8>
 80055be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d2:	4413      	add	r3, r2
 80055d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	011a      	lsls	r2, r3, #4
 80055e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e6:	4413      	add	r3, r2
 80055e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	895b      	ldrh	r3, [r3, #10]
 8005604:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6959      	ldr	r1, [r3, #20]
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005618:	b29b      	uxth	r3, r3
 800561a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800561e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005622:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005626:	6800      	ldr	r0, [r0, #0]
 8005628:	f001 f881 	bl	800672e <USB_WritePMA>
 800562c:	e227      	b.n	8005a7e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800562e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800563e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800564c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005664:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800569a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800569e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ba:	4413      	add	r3, r2
 80056bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	011a      	lsls	r2, r3, #4
 80056cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	891b      	ldrh	r3, [r3, #8]
 80056ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6959      	ldr	r1, [r3, #20]
 80056fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005700:	b29b      	uxth	r3, r3
 8005702:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005706:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800570a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800570e:	6800      	ldr	r0, [r0, #0]
 8005710:	f001 f80d 	bl	800672e <USB_WritePMA>
 8005714:	e1b3      	b.n	8005a7e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005726:	1ad2      	subs	r2, r2, r3
 8005728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80c6 	beq.w	80058e8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	673b      	str	r3, [r7, #112]	@ 0x70
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d177      	bne.n	8005868 <USB_EPStartXfer+0xb18>
 8005778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005798:	4413      	add	r3, r2
 800579a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800579c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80057b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057ca:	d921      	bls.n	8005810 <USB_EPStartXfer+0xac0>
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <USB_EPStartXfer+0xa9c>
 80057e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e050      	b.n	80058b2 <USB_EPStartXfer+0xb62>
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <USB_EPStartXfer+0xade>
 8005818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e041      	b.n	80058b2 <USB_EPStartXfer+0xb62>
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <USB_EPStartXfer+0xafe>
 8005844:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005848:	3301      	adds	r3, #1
 800584a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800584e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29a      	uxth	r2, r3
 8005854:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005858:	b29b      	uxth	r3, r3
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	b29b      	uxth	r3, r3
 800585e:	4313      	orrs	r3, r2
 8005860:	b29a      	uxth	r2, r3
 8005862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e024      	b.n	80058b2 <USB_EPStartXfer+0xb62>
 8005868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d11c      	bne.n	80058b2 <USB_EPStartXfer+0xb62>
 8005878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800588c:	4413      	add	r3, r2
 800588e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058a0:	4413      	add	r3, r2
 80058a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	895b      	ldrh	r3, [r3, #10]
 80058be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6959      	ldr	r1, [r3, #20]
 80058ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058e0:	6800      	ldr	r0, [r0, #0]
 80058e2:	f000 ff24 	bl	800672e <USB_WritePMA>
 80058e6:	e0ca      	b.n	8005a7e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d177      	bne.n	80059e8 <USB_EPStartXfer+0xc98>
 80058f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005918:	4413      	add	r3, r2
 800591a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800591c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	011a      	lsls	r2, r3, #4
 800592a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800592c:	4413      	add	r3, r2
 800592e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005932:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800593e:	b29a      	uxth	r2, r3
 8005940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005948:	2b3e      	cmp	r3, #62	@ 0x3e
 800594a:	d921      	bls.n	8005990 <USB_EPStartXfer+0xc40>
 800594c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <USB_EPStartXfer+0xc1c>
 8005962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005966:	3b01      	subs	r3, #1
 8005968:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800596c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005976:	b29b      	uxth	r3, r3
 8005978:	029b      	lsls	r3, r3, #10
 800597a:	b29b      	uxth	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005988:	b29a      	uxth	r2, r3
 800598a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	e05c      	b.n	8005a4a <USB_EPStartXfer+0xcfa>
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <USB_EPStartXfer+0xc5e>
 8005998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e04d      	b.n	8005a4a <USB_EPStartXfer+0xcfa>
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <USB_EPStartXfer+0xc7e>
 80059c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059c8:	3301      	adds	r3, #1
 80059ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059d8:	b29b      	uxth	r3, r3
 80059da:	029b      	lsls	r3, r3, #10
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4313      	orrs	r3, r2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e030      	b.n	8005a4a <USB_EPStartXfer+0xcfa>
 80059e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d128      	bne.n	8005a4a <USB_EPStartXfer+0xcfa>
 80059f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	011a      	lsls	r2, r3, #4
 8005a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	891b      	ldrh	r3, [r3, #8]
 8005a56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6959      	ldr	r1, [r3, #20]
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a70:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a74:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a78:	6800      	ldr	r0, [r0, #0]
 8005a7a:	f000 fe58 	bl	800672e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	897b      	ldrh	r3, [r7, #10]
 8005aa8:	f083 0310 	eor.w	r3, r3, #16
 8005aac:	817b      	strh	r3, [r7, #10]
 8005aae:	897b      	ldrh	r3, [r7, #10]
 8005ab0:	f083 0320 	eor.w	r3, r3, #32
 8005ab4:	817b      	strh	r3, [r7, #10]
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	441a      	add	r2, r3
 8005ad0:	897b      	ldrh	r3, [r7, #10]
 8005ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	8013      	strh	r3, [r2, #0]
 8005ae6:	f000 bcde 	b.w	80064a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	7b1b      	ldrb	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 80bb 	bne.w	8005c72 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d917      	bls.n	8005b48 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	1ad2      	subs	r2, r2, r3
 8005b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	619a      	str	r2, [r3, #24]
 8005b46:	e00e      	b.n	8005b66 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2200      	movs	r2, #0
 8005b64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	011a      	lsls	r2, r3, #4
 8005b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ba8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bc6:	d924      	bls.n	8005c12 <USB_EPStartXfer+0xec2>
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <USB_EPStartXfer+0xe98>
 8005bde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005be2:	3b01      	subs	r3, #1
 8005be4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	f000 bc10 	b.w	8006432 <USB_EPStartXfer+0x16e2>
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10c      	bne.n	8005c34 <USB_EPStartXfer+0xee4>
 8005c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e3fe      	b.n	8006432 <USB_EPStartXfer+0x16e2>
 8005c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <USB_EPStartXfer+0xf04>
 8005c4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	029b      	lsls	r3, r3, #10
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	4313      	orrs	r3, r2
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e3df      	b.n	8006432 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	78db      	ldrb	r3, [r3, #3]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	f040 8218 	bne.w	80060b4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 809d 	bne.w	8005dd0 <USB_EPStartXfer+0x1080>
 8005c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cba:	4413      	add	r3, r2
 8005cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	011a      	lsls	r2, r3, #4
 8005cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cfe:	d92b      	bls.n	8005d58 <USB_EPStartXfer+0x1008>
 8005d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <USB_EPStartXfer+0xfe0>
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	029b      	lsls	r3, r3, #10
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e070      	b.n	8005e3a <USB_EPStartXfer+0x10ea>
 8005d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10c      	bne.n	8005d82 <USB_EPStartXfer+0x1032>
 8005d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e05b      	b.n	8005e3a <USB_EPStartXfer+0x10ea>
 8005d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <USB_EPStartXfer+0x1062>
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dac:	3301      	adds	r3, #1
 8005dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e034      	b.n	8005e3a <USB_EPStartXfer+0x10ea>
 8005dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d12c      	bne.n	8005e3a <USB_EPStartXfer+0x10ea>
 8005de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e04:	4413      	add	r3, r2
 8005e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	011a      	lsls	r2, r3, #4
 8005e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 809d 	bne.w	8005f94 <USB_EPStartXfer+0x1244>
 8005e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e7e:	4413      	add	r3, r2
 8005e80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	011a      	lsls	r2, r3, #4
 8005e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e96:	4413      	add	r3, r2
 8005e98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ec2:	d92b      	bls.n	8005f1c <USB_EPStartXfer+0x11cc>
 8005ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <USB_EPStartXfer+0x11a4>
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	029b      	lsls	r3, r3, #10
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	e069      	b.n	8005ff0 <USB_EPStartXfer+0x12a0>
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10c      	bne.n	8005f46 <USB_EPStartXfer+0x11f6>
 8005f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e054      	b.n	8005ff0 <USB_EPStartXfer+0x12a0>
 8005f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <USB_EPStartXfer+0x1226>
 8005f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	029b      	lsls	r3, r3, #10
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	e02d      	b.n	8005ff0 <USB_EPStartXfer+0x12a0>
 8005f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d125      	bne.n	8005ff0 <USB_EPStartXfer+0x12a0>
 8005fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005fba:	4413      	add	r3, r2
 8005fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8218 	beq.w	8006432 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006022:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <USB_EPStartXfer+0x12ea>
 800602e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800603a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800603e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 81f5 	bne.w	8006432 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006048:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800604c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 81ee 	bne.w	8006432 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
 80060b2:	e1be      	b.n	8006432 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80060b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	78db      	ldrb	r3, [r3, #3]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 81b4 	bne.w	800642e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d917      	bls.n	8006112 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006102:	1ad2      	subs	r2, r2, r3
 8006104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	619a      	str	r2, [r3, #24]
 8006110:	e00e      	b.n	8006130 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2200      	movs	r2, #0
 800612e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 8085 	bne.w	800624c <USB_EPStartXfer+0x14fc>
 8006142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006154:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800615e:	b29b      	uxth	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006166:	4413      	add	r3, r2
 8006168:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800616c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800617e:	4413      	add	r3, r2
 8006180:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006184:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006188:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80061a2:	d923      	bls.n	80061ec <USB_EPStartXfer+0x149c>
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <USB_EPStartXfer+0x1474>
 80061ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061be:	3b01      	subs	r3, #1
 80061c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	029b      	lsls	r3, r3, #10
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b29b      	uxth	r3, r3
 80061da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	e060      	b.n	80062ae <USB_EPStartXfer+0x155e>
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10c      	bne.n	800620e <USB_EPStartXfer+0x14be>
 80061f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006204:	b29a      	uxth	r2, r3
 8006206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	e04f      	b.n	80062ae <USB_EPStartXfer+0x155e>
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <USB_EPStartXfer+0x14de>
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006228:	3301      	adds	r3, #1
 800622a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800622e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800623a:	b29b      	uxth	r3, r3
 800623c:	029b      	lsls	r3, r3, #10
 800623e:	b29b      	uxth	r3, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e030      	b.n	80062ae <USB_EPStartXfer+0x155e>
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d128      	bne.n	80062ae <USB_EPStartXfer+0x155e>
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006280:	4413      	add	r3, r2
 8006282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	011a      	lsls	r2, r3, #4
 8006294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006298:	4413      	add	r3, r2
 800629a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800629e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f040 8085 	bne.w	80063d8 <USB_EPStartXfer+0x1688>
 80062ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062f2:	4413      	add	r3, r2
 80062f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	011a      	lsls	r2, r3, #4
 8006306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800630a:	4413      	add	r3, r2
 800630c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	2b3e      	cmp	r3, #62	@ 0x3e
 800632e:	d923      	bls.n	8006378 <USB_EPStartXfer+0x1628>
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <USB_EPStartXfer+0x1600>
 8006346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800634a:	3b01      	subs	r3, #1
 800634c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29a      	uxth	r2, r3
 8006358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800635c:	b29b      	uxth	r3, r3
 800635e:	029b      	lsls	r3, r3, #10
 8006360:	b29b      	uxth	r3, r3
 8006362:	4313      	orrs	r3, r2
 8006364:	b29b      	uxth	r3, r3
 8006366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636e:	b29a      	uxth	r2, r3
 8006370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e05c      	b.n	8006432 <USB_EPStartXfer+0x16e2>
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10c      	bne.n	800639a <USB_EPStartXfer+0x164a>
 8006380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006390:	b29a      	uxth	r2, r3
 8006392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	e04b      	b.n	8006432 <USB_EPStartXfer+0x16e2>
 800639a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <USB_EPStartXfer+0x166a>
 80063b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063b4:	3301      	adds	r3, #1
 80063b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	029b      	lsls	r3, r3, #10
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	4313      	orrs	r3, r2
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	e02c      	b.n	8006432 <USB_EPStartXfer+0x16e2>
 80063d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d124      	bne.n	8006432 <USB_EPStartXfer+0x16e2>
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063fe:	4413      	add	r3, r2
 8006400:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006416:	4413      	add	r3, r2
 8006418:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800641c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e001      	b.n	8006432 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e03a      	b.n	80064a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006458:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800645c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006460:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006464:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006468:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800646c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006470:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800649a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d020      	beq.n	8006506 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064da:	81bb      	strh	r3, [r7, #12]
 80064dc:	89bb      	ldrh	r3, [r7, #12]
 80064de:	f083 0310 	eor.w	r3, r3, #16
 80064e2:	81bb      	strh	r3, [r7, #12]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	89bb      	ldrh	r3, [r7, #12]
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]
 8006504:	e01f      	b.n	8006546 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651c:	81fb      	strh	r3, [r7, #14]
 800651e:	89fb      	ldrh	r3, [r7, #14]
 8006520:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006524:	81fb      	strh	r3, [r7, #14]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	89fb      	ldrh	r3, [r7, #14]
 8006532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800653a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800653e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006542:	b29b      	uxth	r3, r3
 8006544:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr

08006552 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006552:	b480      	push	{r7}
 8006554:	b087      	sub	sp, #28
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	7b1b      	ldrb	r3, [r3, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 809d 	bne.w	80066a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d04c      	beq.n	8006608 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	823b      	strh	r3, [r7, #16]
 800657c:	8a3b      	ldrh	r3, [r7, #16]
 800657e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01b      	beq.n	80065be <USB_EPClearStall+0x6c>
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659c:	81fb      	strh	r3, [r7, #14]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	89fb      	ldrh	r3, [r7, #14]
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	78db      	ldrb	r3, [r3, #3]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d06c      	beq.n	80066a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065dc:	81bb      	strh	r3, [r7, #12]
 80065de:	89bb      	ldrh	r3, [r7, #12]
 80065e0:	f083 0320 	eor.w	r3, r3, #32
 80065e4:	81bb      	strh	r3, [r7, #12]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	89bb      	ldrh	r3, [r7, #12]
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
 8006606:	e04b      	b.n	80066a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	82fb      	strh	r3, [r7, #22]
 8006616:	8afb      	ldrh	r3, [r7, #22]
 8006618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01b      	beq.n	8006658 <USB_EPClearStall+0x106>
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006636:	82bb      	strh	r3, [r7, #20]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	8abb      	ldrh	r3, [r7, #20]
 8006644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006654:	b29b      	uxth	r3, r3
 8006656:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800666a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666e:	827b      	strh	r3, [r7, #18]
 8006670:	8a7b      	ldrh	r3, [r7, #18]
 8006672:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006676:	827b      	strh	r3, [r7, #18]
 8006678:	8a7b      	ldrh	r3, [r7, #18]
 800667a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800667e:	827b      	strh	r3, [r7, #18]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	8a7b      	ldrh	r3, [r7, #18]
 800668c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669c:	b29b      	uxth	r3, r3
 800669e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2280      	movs	r2, #128	@ 0x80
 80066c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006708:	b29b      	uxth	r3, r3
 800670a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800670c:	68fb      	ldr	r3, [r7, #12]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800672e:	b480      	push	{r7}
 8006730:	b08b      	sub	sp, #44	@ 0x2c
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	4611      	mov	r1, r2
 800673a:	461a      	mov	r2, r3
 800673c:	460b      	mov	r3, r1
 800673e:	80fb      	strh	r3, [r7, #6]
 8006740:	4613      	mov	r3, r2
 8006742:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006744:	88bb      	ldrh	r3, [r7, #4]
 8006746:	3301      	adds	r3, #1
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	005a      	lsls	r2, r3, #1
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006760:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
 8006766:	e01f      	b.n	80067a8 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	3301      	adds	r3, #1
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	b21b      	sxth	r3, r3
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	b21a      	sxth	r2, r3
 800677a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800677e:	4313      	orrs	r3, r2
 8006780:	b21b      	sxth	r3, r3
 8006782:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	8a7a      	ldrh	r2, [r7, #18]
 8006788:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	3302      	adds	r3, #2
 800678e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	3302      	adds	r3, #2
 8006794:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	3301      	adds	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	3301      	adds	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	3b01      	subs	r3, #1
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1dc      	bne.n	8006768 <USB_WritePMA+0x3a>
  }
}
 80067ae:	bf00      	nop
 80067b0:	bf00      	nop
 80067b2:	372c      	adds	r7, #44	@ 0x2c
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b08b      	sub	sp, #44	@ 0x2c
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	4611      	mov	r1, r2
 80067c6:	461a      	mov	r2, r3
 80067c8:	460b      	mov	r3, r1
 80067ca:	80fb      	strh	r3, [r7, #6]
 80067cc:	4613      	mov	r3, r2
 80067ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067d0:	88bb      	ldrh	r3, [r7, #4]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	005a      	lsls	r2, r3, #1
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f2:	e01b      	b.n	800682c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	3302      	adds	r3, #2
 8006800:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	3301      	adds	r3, #1
 800680e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	b2da      	uxtb	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	3302      	adds	r3, #2
 8006824:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	3b01      	subs	r3, #1
 800682a:	627b      	str	r3, [r7, #36]	@ 0x24
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e0      	bne.n	80067f4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006832:	88bb      	ldrh	r3, [r7, #4]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	701a      	strb	r2, [r3, #0]
  }
}
 800684e:	bf00      	nop
 8006850:	372c      	adds	r7, #44	@ 0x2c
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7c1b      	ldrb	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d115      	bne.n	800689c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006870:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006874:	2202      	movs	r2, #2
 8006876:	2181      	movs	r1, #129	@ 0x81
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 feae 	bl	80085da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006888:	2202      	movs	r2, #2
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fea4 	bl	80085da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800689a:	e012      	b.n	80068c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800689c:	2340      	movs	r3, #64	@ 0x40
 800689e:	2202      	movs	r2, #2
 80068a0:	2181      	movs	r1, #129	@ 0x81
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 fe99 	bl	80085da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068ae:	2340      	movs	r3, #64	@ 0x40
 80068b0:	2202      	movs	r2, #2
 80068b2:	2101      	movs	r1, #1
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fe90 	bl	80085da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068c2:	2308      	movs	r3, #8
 80068c4:	2203      	movs	r2, #3
 80068c6:	2182      	movs	r1, #130	@ 0x82
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fe86 	bl	80085da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80068d8:	f001 ffa6 	bl	8008828 <USBD_static_malloc>
 80068dc:	4602      	mov	r2, r0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d102      	bne.n	80068f4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
 80068f2:	e026      	b.n	8006942 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068fa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	7c1b      	ldrb	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006928:	2101      	movs	r1, #1
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 ff45 	bl	80087ba <USBD_LL_PrepareReceive>
 8006930:	e007      	b.n	8006942 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006938:	2340      	movs	r3, #64	@ 0x40
 800693a:	2101      	movs	r1, #1
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 ff3c 	bl	80087ba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800695c:	2181      	movs	r1, #129	@ 0x81
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fe61 	bl	8008626 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800696a:	2101      	movs	r1, #1
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fe5a 	bl	8008626 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800697a:	2182      	movs	r1, #130	@ 0x82
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 fe52 	bl	8008626 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 ff4c 	bl	8008840 <USBD_static_free>
    pdev->pClassData = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b086      	sub	sp, #24
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d039      	beq.n	8006a58 <USBD_CDC_Setup+0x9e>
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d17f      	bne.n	8006ae8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	88db      	ldrh	r3, [r3, #6]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d029      	beq.n	8006a44 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da11      	bge.n	8006a1e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	88d2      	ldrh	r2, [r2, #6]
 8006a0c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a0e:	6939      	ldr	r1, [r7, #16]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fa06 	bl	8007e28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a1c:	e06b      	b.n	8006af6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	785a      	ldrb	r2, [r3, #1]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	88db      	ldrh	r3, [r3, #6]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a34:	6939      	ldr	r1, [r7, #16]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	88db      	ldrh	r3, [r3, #6]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fa21 	bl	8007e84 <USBD_CtlPrepareRx>
      break;
 8006a42:	e058      	b.n	8006af6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	7850      	ldrb	r0, [r2, #1]
 8006a50:	2200      	movs	r2, #0
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	4798      	blx	r3
      break;
 8006a56:	e04e      	b.n	8006af6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b0b      	cmp	r3, #11
 8006a5e:	d02e      	beq.n	8006abe <USBD_CDC_Setup+0x104>
 8006a60:	2b0b      	cmp	r3, #11
 8006a62:	dc38      	bgt.n	8006ad6 <USBD_CDC_Setup+0x11c>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <USBD_CDC_Setup+0xb4>
 8006a68:	2b0a      	cmp	r3, #10
 8006a6a:	d014      	beq.n	8006a96 <USBD_CDC_Setup+0xdc>
 8006a6c:	e033      	b.n	8006ad6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d107      	bne.n	8006a88 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 f9d1 	bl	8007e28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a86:	e02e      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 f962 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a90:	2302      	movs	r3, #2
 8006a92:	75fb      	strb	r3, [r7, #23]
          break;
 8006a94:	e027      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d107      	bne.n	8006ab0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aa0:	f107 030f 	add.w	r3, r7, #15
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 f9bd 	bl	8007e28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aae:	e01a      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f94e 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	75fb      	strb	r3, [r7, #23]
          break;
 8006abc:	e013      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d00d      	beq.n	8006ae4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f942 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ad4:	e006      	b.n	8006ae4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f93b 	bl	8007d54 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae2:	e000      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>
          break;
 8006ae4:	bf00      	nop
      }
      break;
 8006ae6:	e006      	b.n	8006af6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 f932 	bl	8007d54 <USBD_CtlError>
      ret = USBD_FAIL;
 8006af0:	2302      	movs	r3, #2
 8006af2:	75fb      	strb	r3, [r7, #23]
      break;
 8006af4:	bf00      	nop
  }

  return ret;
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006b1a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d03a      	beq.n	8006b9c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	331c      	adds	r3, #28
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d029      	beq.n	8006b90 <USBD_CDC_DataIn+0x90>
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	331c      	adds	r3, #28
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	78f9      	ldrb	r1, [r7, #3]
 8006b50:	68b8      	ldr	r0, [r7, #8]
 8006b52:	460b      	mov	r3, r1
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4403      	add	r3, r0
 8006b5c:	3320      	adds	r3, #32
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d110      	bne.n	8006b90 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	331c      	adds	r3, #28
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b82:	78f9      	ldrb	r1, [r7, #3]
 8006b84:	2300      	movs	r3, #0
 8006b86:	2200      	movs	r2, #0
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fdf3 	bl	8008774 <USBD_LL_Transmit>
 8006b8e:	e003      	b.n	8006b98 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fe1e 	bl	8008800 <USBD_LL_GetRxDataSize>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00d      	beq.n	8006bf2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006bea:	4611      	mov	r1, r2
 8006bec:	4798      	blx	r3

    return USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e000      	b.n	8006bf4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bf2:	2302      	movs	r3, #2
  }
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d014      	beq.n	8006c40 <USBD_CDC_EP0_RxReady+0x44>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006c1c:	2bff      	cmp	r3, #255	@ 0xff
 8006c1e:	d00f      	beq.n	8006c40 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	22ff      	movs	r2, #255	@ 0xff
 8006c3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2243      	movs	r2, #67	@ 0x43
 8006c58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c5a:	4b03      	ldr	r3, [pc, #12]	@ (8006c68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20000094 	.word	0x20000094

08006c6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2243      	movs	r2, #67	@ 0x43
 8006c78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c7a:	4b03      	ldr	r3, [pc, #12]	@ (8006c88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000050 	.word	0x20000050

08006c8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2243      	movs	r2, #67	@ 0x43
 8006c98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c9a:	4b03      	ldr	r3, [pc, #12]	@ (8006ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	200000d8 	.word	0x200000d8

08006cac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	220a      	movs	r2, #10
 8006cb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006cba:	4b03      	ldr	r3, [pc, #12]	@ (8006cc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	2000000c 	.word	0x2000000c

08006ccc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006d16:	88fa      	ldrh	r2, [r7, #6]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bc80      	pop	{r7}
 8006d28:	4770      	bx	lr

08006d2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr

08006d50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01c      	beq.n	8006da4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d115      	bne.n	8006da0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2181      	movs	r1, #129	@ 0x81
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fcec 	bl	8008774 <USBD_LL_Transmit>

      return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e002      	b.n	8006da6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d017      	beq.n	8006df8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7c1b      	ldrb	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d109      	bne.n	8006de4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dda:	2101      	movs	r1, #1
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fcec 	bl	80087ba <USBD_LL_PrepareReceive>
 8006de2:	e007      	b.n	8006df4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006dea:	2340      	movs	r3, #64	@ 0x40
 8006dec:	2101      	movs	r1, #1
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 fce3 	bl	80087ba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e16:	2302      	movs	r3, #2
 8006e18:	e01a      	b.n	8006e50 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	79fa      	ldrb	r2, [r7, #7]
 8006e46:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f001 fb51 	bl	80084f0 <USBD_LL_Init>

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
 8006e78:	e001      	b.n	8006e7e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fb86 	bl	80085a4 <USBD_LL_Start>

  return USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr

08006eb6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	78fa      	ldrb	r2, [r7, #3]
 8006eda:	4611      	mov	r1, r2
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3

  return USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fed8 	bl	8007ce2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f40:	461a      	mov	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d016      	beq.n	8006f84 <USBD_LL_SetupStage+0x6a>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d81c      	bhi.n	8006f94 <USBD_LL_SetupStage+0x7a>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <USBD_LL_SetupStage+0x4a>
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d008      	beq.n	8006f74 <USBD_LL_SetupStage+0x5a>
 8006f62:	e017      	b.n	8006f94 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9cb 	bl	8007308 <USBD_StdDevReq>
      break;
 8006f72:	e01a      	b.n	8006faa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fa2d 	bl	80073dc <USBD_StdItfReq>
      break;
 8006f82:	e012      	b.n	8006faa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fa6d 	bl	800746c <USBD_StdEPReq>
      break;
 8006f92:	e00a      	b.n	8006faa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006f9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fb5e 	bl	8008664 <USBD_LL_StallEP>
      break;
 8006fa8:	bf00      	nop
  }

  return USBD_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d14b      	bne.n	8007060 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006fce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d134      	bne.n	8007044 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d919      	bls.n	800701a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d203      	bcs.n	8007008 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007004:	b29b      	uxth	r3, r3
 8007006:	e002      	b.n	800700e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 ff54 	bl	8007ec0 <USBD_CtlContinueRx>
 8007018:	e038      	b.n	800708c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800702c:	2b03      	cmp	r3, #3
 800702e:	d105      	bne.n	800703c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 ff51 	bl	8007ee4 <USBD_CtlSendStatus>
 8007042:	e023      	b.n	800708c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800704a:	2b05      	cmp	r3, #5
 800704c:	d11e      	bne.n	800708c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007056:	2100      	movs	r1, #0
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f001 fb03 	bl	8008664 <USBD_LL_StallEP>
 800705e:	e015      	b.n	800708c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007072:	2b03      	cmp	r3, #3
 8007074:	d108      	bne.n	8007088 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	7afa      	ldrb	r2, [r7, #11]
 8007080:	4611      	mov	r1, r2
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	4798      	blx	r3
 8007086:	e001      	b.n	800708c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007088:	2302      	movs	r3, #2
 800708a:	e000      	b.n	800708e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	460b      	mov	r3, r1
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d17f      	bne.n	80071aa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3314      	adds	r3, #20
 80070ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d15c      	bne.n	8007174 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d915      	bls.n	80070f2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 febe 	bl	8007e60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e4:	2300      	movs	r3, #0
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f001 fb65 	bl	80087ba <USBD_LL_PrepareReceive>
 80070f0:	e04e      	b.n	8007190 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	6912      	ldr	r2, [r2, #16]
 80070fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80070fe:	fb01 f202 	mul.w	r2, r1, r2
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11c      	bne.n	8007142 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007110:	429a      	cmp	r2, r3
 8007112:	d316      	bcc.n	8007142 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800711e:	429a      	cmp	r2, r3
 8007120:	d20f      	bcs.n	8007142 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007122:	2200      	movs	r2, #0
 8007124:	2100      	movs	r1, #0
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fe9a 	bl	8007e60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	2100      	movs	r1, #0
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f001 fb3d 	bl	80087ba <USBD_LL_PrepareReceive>
 8007140:	e026      	b.n	8007190 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007154:	2b03      	cmp	r3, #3
 8007156:	d105      	bne.n	8007164 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007164:	2180      	movs	r1, #128	@ 0x80
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f001 fa7c 	bl	8008664 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fecc 	bl	8007f0a <USBD_CtlReceiveStatus>
 8007172:	e00d      	b.n	8007190 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800717a:	2b04      	cmp	r3, #4
 800717c:	d004      	beq.n	8007188 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007184:	2b00      	cmp	r3, #0
 8007186:	d103      	bne.n	8007190 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007188:	2180      	movs	r1, #128	@ 0x80
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f001 fa6a 	bl	8008664 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d11d      	bne.n	80071d6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff fe81 	bl	8006ea2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071a8:	e015      	b.n	80071d6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d108      	bne.n	80071d2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	7afa      	ldrb	r2, [r7, #11]
 80071ca:	4611      	mov	r1, r2
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	4798      	blx	r3
 80071d0:	e001      	b.n	80071d6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071d2:	2302      	movs	r3, #2
 80071d4:	e000      	b.n	80071d8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071e8:	2340      	movs	r3, #64	@ 0x40
 80071ea:	2200      	movs	r2, #0
 80071ec:	2100      	movs	r1, #0
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 f9f3 	bl	80085da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2240      	movs	r2, #64	@ 0x40
 8007200:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007204:	2340      	movs	r3, #64	@ 0x40
 8007206:	2200      	movs	r2, #0
 8007208:	2180      	movs	r1, #128	@ 0x80
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 f9e5 	bl	80085da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2240      	movs	r2, #64	@ 0x40
 800721a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	4611      	mov	r1, r2
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
  }

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	78fa      	ldrb	r2, [r7, #3]
 8007272:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2204      	movs	r2, #4
 8007298:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d105      	bne.n	80072c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr

080072d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d10b      	bne.n	80072fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800731e:	2b40      	cmp	r3, #64	@ 0x40
 8007320:	d005      	beq.n	800732e <USBD_StdDevReq+0x26>
 8007322:	2b40      	cmp	r3, #64	@ 0x40
 8007324:	d84f      	bhi.n	80073c6 <USBD_StdDevReq+0xbe>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <USBD_StdDevReq+0x36>
 800732a:	2b20      	cmp	r3, #32
 800732c:	d14b      	bne.n	80073c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
      break;
 800733c:	e048      	b.n	80073d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	785b      	ldrb	r3, [r3, #1]
 8007342:	2b09      	cmp	r3, #9
 8007344:	d839      	bhi.n	80073ba <USBD_StdDevReq+0xb2>
 8007346:	a201      	add	r2, pc, #4	@ (adr r2, 800734c <USBD_StdDevReq+0x44>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	0800739d 	.word	0x0800739d
 8007350:	080073b1 	.word	0x080073b1
 8007354:	080073bb 	.word	0x080073bb
 8007358:	080073a7 	.word	0x080073a7
 800735c:	080073bb 	.word	0x080073bb
 8007360:	0800737f 	.word	0x0800737f
 8007364:	08007375 	.word	0x08007375
 8007368:	080073bb 	.word	0x080073bb
 800736c:	08007393 	.word	0x08007393
 8007370:	08007389 	.word	0x08007389
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f9dc 	bl	8007734 <USBD_GetDescriptor>
          break;
 800737c:	e022      	b.n	80073c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fb3f 	bl	8007a04 <USBD_SetAddress>
          break;
 8007386:	e01d      	b.n	80073c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fb7e 	bl	8007a8c <USBD_SetConfig>
          break;
 8007390:	e018      	b.n	80073c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc07 	bl	8007ba8 <USBD_GetConfig>
          break;
 800739a:	e013      	b.n	80073c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fc37 	bl	8007c12 <USBD_GetStatus>
          break;
 80073a4:	e00e      	b.n	80073c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc65 	bl	8007c78 <USBD_SetFeature>
          break;
 80073ae:	e009      	b.n	80073c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fc74 	bl	8007ca0 <USBD_ClrFeature>
          break;
 80073b8:	e004      	b.n	80073c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fcc9 	bl	8007d54 <USBD_CtlError>
          break;
 80073c2:	bf00      	nop
      }
      break;
 80073c4:	e004      	b.n	80073d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fcc3 	bl	8007d54 <USBD_CtlError>
      break;
 80073ce:	bf00      	nop
  }

  return ret;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop

080073dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	d005      	beq.n	8007402 <USBD_StdItfReq+0x26>
 80073f6:	2b40      	cmp	r3, #64	@ 0x40
 80073f8:	d82e      	bhi.n	8007458 <USBD_StdItfReq+0x7c>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <USBD_StdItfReq+0x26>
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d12a      	bne.n	8007458 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007408:	3b01      	subs	r3, #1
 800740a:	2b02      	cmp	r3, #2
 800740c:	d81d      	bhi.n	800744a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	889b      	ldrh	r3, [r3, #4]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d813      	bhi.n	8007440 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
 8007426:	4603      	mov	r3, r0
 8007428:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d110      	bne.n	8007454 <USBD_StdItfReq+0x78>
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10d      	bne.n	8007454 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fd53 	bl	8007ee4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800743e:	e009      	b.n	8007454 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fc86 	bl	8007d54 <USBD_CtlError>
          break;
 8007448:	e004      	b.n	8007454 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fc81 	bl	8007d54 <USBD_CtlError>
          break;
 8007452:	e000      	b.n	8007456 <USBD_StdItfReq+0x7a>
          break;
 8007454:	bf00      	nop
      }
      break;
 8007456:	e004      	b.n	8007462 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fc7a 	bl	8007d54 <USBD_CtlError>
      break;
 8007460:	bf00      	nop
  }

  return USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	889b      	ldrh	r3, [r3, #4]
 800747e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007488:	2b40      	cmp	r3, #64	@ 0x40
 800748a:	d007      	beq.n	800749c <USBD_StdEPReq+0x30>
 800748c:	2b40      	cmp	r3, #64	@ 0x40
 800748e:	f200 8146 	bhi.w	800771e <USBD_StdEPReq+0x2b2>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <USBD_StdEPReq+0x40>
 8007496:	2b20      	cmp	r3, #32
 8007498:	f040 8141 	bne.w	800771e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
      break;
 80074aa:	e13d      	b.n	8007728 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d10a      	bne.n	80074ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4798      	blx	r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	e12d      	b.n	800772a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d007      	beq.n	80074e6 <USBD_StdEPReq+0x7a>
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	f300 811b 	bgt.w	8007712 <USBD_StdEPReq+0x2a6>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d072      	beq.n	80075c6 <USBD_StdEPReq+0x15a>
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d03a      	beq.n	800755a <USBD_StdEPReq+0xee>
 80074e4:	e115      	b.n	8007712 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d002      	beq.n	80074f6 <USBD_StdEPReq+0x8a>
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d015      	beq.n	8007520 <USBD_StdEPReq+0xb4>
 80074f4:	e02b      	b.n	800754e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00c      	beq.n	8007516 <USBD_StdEPReq+0xaa>
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b80      	cmp	r3, #128	@ 0x80
 8007500:	d009      	beq.n	8007516 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 f8ac 	bl	8008664 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800750c:	2180      	movs	r1, #128	@ 0x80
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f8a8 	bl	8008664 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007514:	e020      	b.n	8007558 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc1b 	bl	8007d54 <USBD_CtlError>
              break;
 800751e:	e01b      	b.n	8007558 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	885b      	ldrh	r3, [r3, #2]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10e      	bne.n	8007546 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <USBD_StdEPReq+0xda>
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	2b80      	cmp	r3, #128	@ 0x80
 8007532:	d008      	beq.n	8007546 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	88db      	ldrh	r3, [r3, #6]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 f88f 	bl	8008664 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fccc 	bl	8007ee4 <USBD_CtlSendStatus>

              break;
 800754c:	e004      	b.n	8007558 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fbff 	bl	8007d54 <USBD_CtlError>
              break;
 8007556:	bf00      	nop
          }
          break;
 8007558:	e0e0      	b.n	800771c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007560:	2b02      	cmp	r3, #2
 8007562:	d002      	beq.n	800756a <USBD_StdEPReq+0xfe>
 8007564:	2b03      	cmp	r3, #3
 8007566:	d015      	beq.n	8007594 <USBD_StdEPReq+0x128>
 8007568:	e026      	b.n	80075b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <USBD_StdEPReq+0x11e>
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2b80      	cmp	r3, #128	@ 0x80
 8007574:	d009      	beq.n	800758a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 f872 	bl	8008664 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007580:	2180      	movs	r1, #128	@ 0x80
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 f86e 	bl	8008664 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007588:	e01c      	b.n	80075c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fbe1 	bl	8007d54 <USBD_CtlError>
              break;
 8007592:	e017      	b.n	80075c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	885b      	ldrh	r3, [r3, #2]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d112      	bne.n	80075c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f879 	bl	80086a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fc97 	bl	8007ee4 <USBD_CtlSendStatus>
              }
              break;
 80075b6:	e004      	b.n	80075c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fbca 	bl	8007d54 <USBD_CtlError>
              break;
 80075c0:	e000      	b.n	80075c4 <USBD_StdEPReq+0x158>
              break;
 80075c2:	bf00      	nop
          }
          break;
 80075c4:	e0aa      	b.n	800771c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d002      	beq.n	80075d6 <USBD_StdEPReq+0x16a>
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d032      	beq.n	800763a <USBD_StdEPReq+0x1ce>
 80075d4:	e097      	b.n	8007706 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <USBD_StdEPReq+0x180>
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	2b80      	cmp	r3, #128	@ 0x80
 80075e0:	d004      	beq.n	80075ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fbb5 	bl	8007d54 <USBD_CtlError>
                break;
 80075ea:	e091      	b.n	8007710 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	da0b      	bge.n	800760c <USBD_StdEPReq+0x1a0>
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	3310      	adds	r3, #16
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4413      	add	r3, r2
 8007608:	3304      	adds	r3, #4
 800760a:	e00b      	b.n	8007624 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	3304      	adds	r3, #4
 8007624:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2202      	movs	r2, #2
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fbf8 	bl	8007e28 <USBD_CtlSendData>
              break;
 8007638:	e06a      	b.n	8007710 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800763a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800763e:	2b00      	cmp	r3, #0
 8007640:	da11      	bge.n	8007666 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	f003 020f 	and.w	r2, r3, #15
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	440b      	add	r3, r1
 8007654:	3318      	adds	r3, #24
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d117      	bne.n	800768c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fb78 	bl	8007d54 <USBD_CtlError>
                  break;
 8007664:	e054      	b.n	8007710 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	f003 020f 	and.w	r2, r3, #15
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	4613      	mov	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fb65 	bl	8007d54 <USBD_CtlError>
                  break;
 800768a:	e041      	b.n	8007710 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800768c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007690:	2b00      	cmp	r3, #0
 8007692:	da0b      	bge.n	80076ac <USBD_StdEPReq+0x240>
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	3310      	adds	r3, #16
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	3304      	adds	r3, #4
 80076aa:	e00b      	b.n	80076c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	4413      	add	r3, r2
 80076c2:	3304      	adds	r3, #4
 80076c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <USBD_StdEPReq+0x266>
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b80      	cmp	r3, #128	@ 0x80
 80076d0:	d103      	bne.n	80076da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e00e      	b.n	80076f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fffe 	bl	80086e0 <USBD_LL_IsStallEP>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2201      	movs	r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e002      	b.n	80076f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2202      	movs	r2, #2
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fb92 	bl	8007e28 <USBD_CtlSendData>
              break;
 8007704:	e004      	b.n	8007710 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fb23 	bl	8007d54 <USBD_CtlError>
              break;
 800770e:	bf00      	nop
          }
          break;
 8007710:	e004      	b.n	800771c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fb1d 	bl	8007d54 <USBD_CtlError>
          break;
 800771a:	bf00      	nop
      }
      break;
 800771c:	e004      	b.n	8007728 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fb17 	bl	8007d54 <USBD_CtlError>
      break;
 8007726:	bf00      	nop
  }

  return ret;
 8007728:	7bfb      	ldrb	r3, [r7, #15]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	0a1b      	lsrs	r3, r3, #8
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	2b06      	cmp	r3, #6
 8007756:	f200 8128 	bhi.w	80079aa <USBD_GetDescriptor+0x276>
 800775a:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <USBD_GetDescriptor+0x2c>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	0800777d 	.word	0x0800777d
 8007764:	08007795 	.word	0x08007795
 8007768:	080077d5 	.word	0x080077d5
 800776c:	080079ab 	.word	0x080079ab
 8007770:	080079ab 	.word	0x080079ab
 8007774:	0800794b 	.word	0x0800794b
 8007778:	08007977 	.word	0x08007977
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7c12      	ldrb	r2, [r2, #16]
 8007788:	f107 0108 	add.w	r1, r7, #8
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
      break;
 8007792:	e112      	b.n	80079ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	7c1b      	ldrb	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10d      	bne.n	80077b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a4:	f107 0208 	add.w	r2, r7, #8
 80077a8:	4610      	mov	r0, r2
 80077aa:	4798      	blx	r3
 80077ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	2202      	movs	r2, #2
 80077b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077b6:	e100      	b.n	80079ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	f107 0208 	add.w	r2, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
 80077c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	2202      	movs	r2, #2
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e0f2      	b.n	80079ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	885b      	ldrh	r3, [r3, #2]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b05      	cmp	r3, #5
 80077dc:	f200 80ac 	bhi.w	8007938 <USBD_GetDescriptor+0x204>
 80077e0:	a201      	add	r2, pc, #4	@ (adr r2, 80077e8 <USBD_GetDescriptor+0xb4>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	08007801 	.word	0x08007801
 80077ec:	08007835 	.word	0x08007835
 80077f0:	08007869 	.word	0x08007869
 80077f4:	0800789d 	.word	0x0800789d
 80077f8:	080078d1 	.word	0x080078d1
 80077fc:	08007905 	.word	0x08007905
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	7c12      	ldrb	r2, [r2, #16]
 8007818:	f107 0108 	add.w	r1, r7, #8
 800781c:	4610      	mov	r0, r2
 800781e:	4798      	blx	r3
 8007820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007822:	e091      	b.n	8007948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa94 	bl	8007d54 <USBD_CtlError>
            err++;
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	3301      	adds	r3, #1
 8007830:	72fb      	strb	r3, [r7, #11]
          break;
 8007832:	e089      	b.n	8007948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	7c12      	ldrb	r2, [r2, #16]
 800784c:	f107 0108 	add.w	r1, r7, #8
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
 8007854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007856:	e077      	b.n	8007948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fa7a 	bl	8007d54 <USBD_CtlError>
            err++;
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	3301      	adds	r3, #1
 8007864:	72fb      	strb	r3, [r7, #11]
          break;
 8007866:	e06f      	b.n	8007948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	7c12      	ldrb	r2, [r2, #16]
 8007880:	f107 0108 	add.w	r1, r7, #8
 8007884:	4610      	mov	r0, r2
 8007886:	4798      	blx	r3
 8007888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800788a:	e05d      	b.n	8007948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fa60 	bl	8007d54 <USBD_CtlError>
            err++;
 8007894:	7afb      	ldrb	r3, [r7, #11]
 8007896:	3301      	adds	r3, #1
 8007898:	72fb      	strb	r3, [r7, #11]
          break;
 800789a:	e055      	b.n	8007948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7c12      	ldrb	r2, [r2, #16]
 80078b4:	f107 0108 	add.w	r1, r7, #8
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078be:	e043      	b.n	8007948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa46 	bl	8007d54 <USBD_CtlError>
            err++;
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	3301      	adds	r3, #1
 80078cc:	72fb      	strb	r3, [r7, #11]
          break;
 80078ce:	e03b      	b.n	8007948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	7c12      	ldrb	r2, [r2, #16]
 80078e8:	f107 0108 	add.w	r1, r7, #8
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f2:	e029      	b.n	8007948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa2c 	bl	8007d54 <USBD_CtlError>
            err++;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	3301      	adds	r3, #1
 8007900:	72fb      	strb	r3, [r7, #11]
          break;
 8007902:	e021      	b.n	8007948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	7c12      	ldrb	r2, [r2, #16]
 800791c:	f107 0108 	add.w	r1, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007926:	e00f      	b.n	8007948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa12 	bl	8007d54 <USBD_CtlError>
            err++;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	3301      	adds	r3, #1
 8007934:	72fb      	strb	r3, [r7, #11]
          break;
 8007936:	e007      	b.n	8007948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa0a 	bl	8007d54 <USBD_CtlError>
          err++;
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	3301      	adds	r3, #1
 8007944:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007946:	e038      	b.n	80079ba <USBD_GetDescriptor+0x286>
 8007948:	e037      	b.n	80079ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	7c1b      	ldrb	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d109      	bne.n	8007966 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800795a:	f107 0208 	add.w	r2, r7, #8
 800795e:	4610      	mov	r0, r2
 8007960:	4798      	blx	r3
 8007962:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007964:	e029      	b.n	80079ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9f3 	bl	8007d54 <USBD_CtlError>
        err++;
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	3301      	adds	r3, #1
 8007972:	72fb      	strb	r3, [r7, #11]
      break;
 8007974:	e021      	b.n	80079ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7c1b      	ldrb	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10d      	bne.n	800799a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007986:	f107 0208 	add.w	r2, r7, #8
 800798a:	4610      	mov	r0, r2
 800798c:	4798      	blx	r3
 800798e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	2207      	movs	r2, #7
 8007996:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007998:	e00f      	b.n	80079ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9d9 	bl	8007d54 <USBD_CtlError>
        err++;
 80079a2:	7afb      	ldrb	r3, [r7, #11]
 80079a4:	3301      	adds	r3, #1
 80079a6:	72fb      	strb	r3, [r7, #11]
      break;
 80079a8:	e007      	b.n	80079ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f9d1 	bl	8007d54 <USBD_CtlError>
      err++;
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	3301      	adds	r3, #1
 80079b6:	72fb      	strb	r3, [r7, #11]
      break;
 80079b8:	bf00      	nop
  }

  if (err != 0U)
 80079ba:	7afb      	ldrb	r3, [r7, #11]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11c      	bne.n	80079fa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079c0:	893b      	ldrh	r3, [r7, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d011      	beq.n	80079ea <USBD_GetDescriptor+0x2b6>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	88db      	ldrh	r3, [r3, #6]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88da      	ldrh	r2, [r3, #6]
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	4293      	cmp	r3, r2
 80079d6:	bf28      	it	cs
 80079d8:	4613      	movcs	r3, r2
 80079da:	b29b      	uxth	r3, r3
 80079dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079de:	893b      	ldrh	r3, [r7, #8]
 80079e0:	461a      	mov	r2, r3
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fa1f 	bl	8007e28 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	88db      	ldrh	r3, [r3, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d104      	bne.n	80079fc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fa76 	bl	8007ee4 <USBD_CtlSendStatus>
 80079f8:	e000      	b.n	80079fc <USBD_GetDescriptor+0x2c8>
    return;
 80079fa:	bf00      	nop
    }
  }
}
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop

08007a04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	889b      	ldrh	r3, [r3, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d130      	bne.n	8007a78 <USBD_SetAddress+0x74>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	88db      	ldrh	r3, [r3, #6]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d12c      	bne.n	8007a78 <USBD_SetAddress+0x74>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a24:	d828      	bhi.n	8007a78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	885b      	ldrh	r3, [r3, #2]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d104      	bne.n	8007a46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f988 	bl	8007d54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a44:	e01d      	b.n	8007a82 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	7bfa      	ldrb	r2, [r7, #15]
 8007a4a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fe6f 	bl	8008736 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fa43 	bl	8007ee4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6c:	e009      	b.n	8007a82 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a76:	e004      	b.n	8007a82 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f96a 	bl	8007d54 <USBD_CtlError>
  }
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	885b      	ldrh	r3, [r3, #2]
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	4b41      	ldr	r3, [pc, #260]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007a9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007aa0:	4b40      	ldr	r3, [pc, #256]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d904      	bls.n	8007ab2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f952 	bl	8007d54 <USBD_CtlError>
 8007ab0:	e075      	b.n	8007b9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d002      	beq.n	8007ac2 <USBD_SetConfig+0x36>
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d023      	beq.n	8007b08 <USBD_SetConfig+0x7c>
 8007ac0:	e062      	b.n	8007b88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ac2:	4b38      	ldr	r3, [pc, #224]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01a      	beq.n	8007b00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007aca:	4b36      	ldr	r3, [pc, #216]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007adc:	4b31      	ldr	r3, [pc, #196]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff f9e7 	bl	8006eb6 <USBD_SetClassConfig>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d104      	bne.n	8007af8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f92f 	bl	8007d54 <USBD_CtlError>
            return;
 8007af6:	e052      	b.n	8007b9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f9f3 	bl	8007ee4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007afe:	e04e      	b.n	8007b9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f9ef 	bl	8007ee4 <USBD_CtlSendStatus>
        break;
 8007b06:	e04a      	b.n	8007b9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b08:	4b26      	ldr	r3, [pc, #152]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d112      	bne.n	8007b36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007b18:	4b22      	ldr	r3, [pc, #136]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b22:	4b20      	ldr	r3, [pc, #128]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff f9e3 	bl	8006ef4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f9d8 	bl	8007ee4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b34:	e033      	b.n	8007b9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b36:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d01d      	beq.n	8007b80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff f9d1 	bl	8006ef4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b52:	4b14      	ldr	r3, [pc, #80]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b5c:	4b11      	ldr	r3, [pc, #68]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff f9a7 	bl	8006eb6 <USBD_SetClassConfig>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d104      	bne.n	8007b78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f8ef 	bl	8007d54 <USBD_CtlError>
            return;
 8007b76:	e012      	b.n	8007b9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f9b3 	bl	8007ee4 <USBD_CtlSendStatus>
        break;
 8007b7e:	e00e      	b.n	8007b9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f9af 	bl	8007ee4 <USBD_CtlSendStatus>
        break;
 8007b86:	e00a      	b.n	8007b9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f8e2 	bl	8007d54 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b90:	4b04      	ldr	r3, [pc, #16]	@ (8007ba4 <USBD_SetConfig+0x118>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff f9ac 	bl	8006ef4 <USBD_ClrClassConfig>
        break;
 8007b9c:	bf00      	nop
    }
  }
}
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	200002c8 	.word	0x200002c8

08007ba8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	88db      	ldrh	r3, [r3, #6]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d004      	beq.n	8007bc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8c9 	bl	8007d54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bc2:	e022      	b.n	8007c0a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	dc02      	bgt.n	8007bd4 <USBD_GetConfig+0x2c>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dc03      	bgt.n	8007bda <USBD_GetConfig+0x32>
 8007bd2:	e015      	b.n	8007c00 <USBD_GetConfig+0x58>
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d00b      	beq.n	8007bf0 <USBD_GetConfig+0x48>
 8007bd8:	e012      	b.n	8007c00 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3308      	adds	r3, #8
 8007be4:	2201      	movs	r2, #1
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f91d 	bl	8007e28 <USBD_CtlSendData>
        break;
 8007bee:	e00c      	b.n	8007c0a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f915 	bl	8007e28 <USBD_CtlSendData>
        break;
 8007bfe:	e004      	b.n	8007c0a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f8a6 	bl	8007d54 <USBD_CtlError>
        break;
 8007c08:	bf00      	nop
}
 8007c0a:	bf00      	nop
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c22:	3b01      	subs	r3, #1
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d81e      	bhi.n	8007c66 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	88db      	ldrh	r3, [r3, #6]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d004      	beq.n	8007c3a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f88e 	bl	8007d54 <USBD_CtlError>
        break;
 8007c38:	e01a      	b.n	8007c70 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f043 0202 	orr.w	r2, r3, #2
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	330c      	adds	r3, #12
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8e2 	bl	8007e28 <USBD_CtlSendData>
      break;
 8007c64:	e004      	b.n	8007c70 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f873 	bl	8007d54 <USBD_CtlError>
      break;
 8007c6e:	bf00      	nop
  }
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d106      	bne.n	8007c98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f926 	bl	8007ee4 <USBD_CtlSendStatus>
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d80b      	bhi.n	8007cce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10c      	bne.n	8007cd8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f90c 	bl	8007ee4 <USBD_CtlSendStatus>
      }
      break;
 8007ccc:	e004      	b.n	8007cd8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f83f 	bl	8007d54 <USBD_CtlError>
      break;
 8007cd6:	e000      	b.n	8007cda <USBD_ClrFeature+0x3a>
      break;
 8007cd8:	bf00      	nop
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	785a      	ldrb	r2, [r3, #1]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	3303      	adds	r3, #3
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	4413      	add	r3, r2
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	3305      	adds	r3, #5
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	021b      	lsls	r3, r3, #8
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	4413      	add	r3, r2
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	3306      	adds	r3, #6
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	3307      	adds	r3, #7
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4413      	add	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	80da      	strh	r2, [r3, #6]

}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr

08007d54 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d5e:	2180      	movs	r1, #128	@ 0x80
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc7f 	bl	8008664 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d66:	2100      	movs	r1, #0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fc7b 	bl	8008664 <USBD_LL_StallEP>
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b086      	sub	sp, #24
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d032      	beq.n	8007df2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f834 	bl	8007dfa <USBD_GetLen>
 8007d92:	4603      	mov	r3, r0
 8007d94:	3301      	adds	r3, #1
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	75fa      	strb	r2, [r7, #23]
 8007da6:	461a      	mov	r2, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4413      	add	r3, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	75fa      	strb	r2, [r7, #23]
 8007db8:	461a      	mov	r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007dc2:	e012      	b.n	8007dea <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	60fa      	str	r2, [r7, #12]
 8007dca:	7dfa      	ldrb	r2, [r7, #23]
 8007dcc:	1c51      	adds	r1, r2, #1
 8007dce:	75f9      	strb	r1, [r7, #23]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	440a      	add	r2, r1
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	75fa      	strb	r2, [r7, #23]
 8007de0:	461a      	mov	r2, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4413      	add	r3, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e8      	bne.n	8007dc4 <USBD_GetString+0x4e>
    }
  }
}
 8007df2:	bf00      	nop
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e06:	e005      	b.n	8007e14 <USBD_GetLen+0x1a>
  {
    len++;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3301      	adds	r3, #1
 8007e12:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f5      	bne.n	8007e08 <USBD_GetLen+0xe>
  }

  return len;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr

08007e28 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007e3e:	88fa      	ldrh	r2, [r7, #6]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e44:	88fa      	ldrh	r2, [r7, #6]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	2100      	movs	r1, #0
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fc8f 	bl	8008774 <USBD_LL_Transmit>

  return USBD_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	2100      	movs	r1, #0
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 fc7d 	bl	8008774 <USBD_LL_Transmit>

  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2203      	movs	r2, #3
 8007e96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e9a:	88fa      	ldrh	r2, [r7, #6]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ea2:	88fa      	ldrh	r2, [r7, #6]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	2100      	movs	r1, #0
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 fc82 	bl	80087ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 fc70 	bl	80087ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2204      	movs	r2, #4
 8007ef0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc3a 	bl	8008774 <USBD_LL_Transmit>

  return USBD_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2205      	movs	r2, #5
 8007f16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2100      	movs	r1, #0
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc4a 	bl	80087ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f34:	2200      	movs	r2, #0
 8007f36:	4912      	ldr	r1, [pc, #72]	@ (8007f80 <MX_USB_DEVICE_Init+0x50>)
 8007f38:	4812      	ldr	r0, [pc, #72]	@ (8007f84 <MX_USB_DEVICE_Init+0x54>)
 8007f3a:	f7fe ff62 	bl	8006e02 <USBD_Init>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f44:	f7f8 fb2a 	bl	800059c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f48:	490f      	ldr	r1, [pc, #60]	@ (8007f88 <MX_USB_DEVICE_Init+0x58>)
 8007f4a:	480e      	ldr	r0, [pc, #56]	@ (8007f84 <MX_USB_DEVICE_Init+0x54>)
 8007f4c:	f7fe ff84 	bl	8006e58 <USBD_RegisterClass>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f56:	f7f8 fb21 	bl	800059c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f5a:	490c      	ldr	r1, [pc, #48]	@ (8007f8c <MX_USB_DEVICE_Init+0x5c>)
 8007f5c:	4809      	ldr	r0, [pc, #36]	@ (8007f84 <MX_USB_DEVICE_Init+0x54>)
 8007f5e:	f7fe feb5 	bl	8006ccc <USBD_CDC_RegisterInterface>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f68:	f7f8 fb18 	bl	800059c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f6c:	4805      	ldr	r0, [pc, #20]	@ (8007f84 <MX_USB_DEVICE_Init+0x54>)
 8007f6e:	f7fe ff8c 	bl	8006e8a <USBD_Start>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f78:	f7f8 fb10 	bl	800059c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f7c:	bf00      	nop
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	2000012c 	.word	0x2000012c
 8007f84:	200002cc 	.word	0x200002cc
 8007f88:	20000018 	.word	0x20000018
 8007f8c:	2000011c 	.word	0x2000011c

08007f90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f94:	2200      	movs	r2, #0
 8007f96:	490a      	ldr	r1, [pc, #40]	@ (8007fc0 <CDC_Init_FS+0x30>)
 8007f98:	480a      	ldr	r0, [pc, #40]	@ (8007fc4 <CDC_Init_FS+0x34>)
 8007f9a:	f7fe fead 	bl	8006cf8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f9e:	490a      	ldr	r1, [pc, #40]	@ (8007fc8 <CDC_Init_FS+0x38>)
 8007fa0:	4808      	ldr	r0, [pc, #32]	@ (8007fc4 <CDC_Init_FS+0x34>)
 8007fa2:	f7fe fec2 	bl	8006d2a <USBD_CDC_SetRxBuffer>
  VCP_RxWriteIndex = 0;
 8007fa6:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <CDC_Init_FS+0x3c>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
  VCP_RxReadIndex = 0;
 8007fac:	4b08      	ldr	r3, [pc, #32]	@ (8007fd0 <CDC_Init_FS+0x40>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS); // Start reception: This is crucial to enable receiving the first packet.
 8007fb2:	4804      	ldr	r0, [pc, #16]	@ (8007fc4 <CDC_Init_FS+0x34>)
 8007fb4:	f7fe fefb 	bl	8006dae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fb8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000990 	.word	0x20000990
 8007fc4:	200002cc 	.word	0x200002cc
 8007fc8:	20000590 	.word	0x20000590
 8007fcc:	20000208 	.word	0x20000208
 8007fd0:	2000020c 	.word	0x2000020c

08007fd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr
	...

08007fe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	2b23      	cmp	r3, #35	@ 0x23
 8007ff8:	d84a      	bhi.n	8008090 <CDC_Control_FS+0xac>
 8007ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8008000 <CDC_Control_FS+0x1c>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008091 	.word	0x08008091
 8008004:	08008091 	.word	0x08008091
 8008008:	08008091 	.word	0x08008091
 800800c:	08008091 	.word	0x08008091
 8008010:	08008091 	.word	0x08008091
 8008014:	08008091 	.word	0x08008091
 8008018:	08008091 	.word	0x08008091
 800801c:	08008091 	.word	0x08008091
 8008020:	08008091 	.word	0x08008091
 8008024:	08008091 	.word	0x08008091
 8008028:	08008091 	.word	0x08008091
 800802c:	08008091 	.word	0x08008091
 8008030:	08008091 	.word	0x08008091
 8008034:	08008091 	.word	0x08008091
 8008038:	08008091 	.word	0x08008091
 800803c:	08008091 	.word	0x08008091
 8008040:	08008091 	.word	0x08008091
 8008044:	08008091 	.word	0x08008091
 8008048:	08008091 	.word	0x08008091
 800804c:	08008091 	.word	0x08008091
 8008050:	08008091 	.word	0x08008091
 8008054:	08008091 	.word	0x08008091
 8008058:	08008091 	.word	0x08008091
 800805c:	08008091 	.word	0x08008091
 8008060:	08008091 	.word	0x08008091
 8008064:	08008091 	.word	0x08008091
 8008068:	08008091 	.word	0x08008091
 800806c:	08008091 	.word	0x08008091
 8008070:	08008091 	.word	0x08008091
 8008074:	08008091 	.word	0x08008091
 8008078:	08008091 	.word	0x08008091
 800807c:	08008091 	.word	0x08008091
 8008080:	08008091 	.word	0x08008091
 8008084:	08008091 	.word	0x08008091
 8008088:	08008091 	.word	0x08008091
 800808c:	08008091 	.word	0x08008091
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008090:	bf00      	nop
  }

  return (USBD_OK);
 8008092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop

080080a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
//  return (USBD_OK);
	for (uint32_t i = 0; i < *Len; i++)
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	e011      	b.n	80080d4 <CDC_Receive_FS+0x34>
	{
		VCP_RxBuffer[VCP_RxWriteIndex] = Buf[i];
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	441a      	add	r2, r3
 80080b6:	4b10      	ldr	r3, [pc, #64]	@ (80080f8 <CDC_Receive_FS+0x58>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	7811      	ldrb	r1, [r2, #0]
 80080bc:	4a0f      	ldr	r2, [pc, #60]	@ (80080fc <CDC_Receive_FS+0x5c>)
 80080be:	54d1      	strb	r1, [r2, r3]
		VCP_RxWriteIndex = (VCP_RxWriteIndex + 1) % VCP_RX_BUFFER_SIZE;
 80080c0:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <CDC_Receive_FS+0x58>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	f003 031f 	and.w	r3, r3, #31
 80080ca:	4a0b      	ldr	r2, [pc, #44]	@ (80080f8 <CDC_Receive_FS+0x58>)
 80080cc:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; i < *Len; i++)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d3e8      	bcc.n	80080b0 <CDC_Receive_FS+0x10>
	}
	// Prepare for the next reception.
	  // This tells the USB stack that you are ready to receive more data into its buffer.
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4807      	ldr	r0, [pc, #28]	@ (8008100 <CDC_Receive_FS+0x60>)
 80080e2:	f7fe fe22 	bl	8006d2a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS); // Crucial: Re-arm the reception for the next packet
 80080e6:	4806      	ldr	r0, [pc, #24]	@ (8008100 <CDC_Receive_FS+0x60>)
 80080e8:	f7fe fe61 	bl	8006dae <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80080ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000208 	.word	0x20000208
 80080fc:	200001e8 	.word	0x200001e8
 8008100:	200002cc 	.word	0x200002cc

08008104 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008114:	4b0d      	ldr	r3, [pc, #52]	@ (800814c <CDC_Transmit_FS+0x48>)
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800811a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008126:	2301      	movs	r3, #1
 8008128:	e00b      	b.n	8008142 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800812a:	887b      	ldrh	r3, [r7, #2]
 800812c:	461a      	mov	r2, r3
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4806      	ldr	r0, [pc, #24]	@ (800814c <CDC_Transmit_FS+0x48>)
 8008132:	f7fe fde1 	bl	8006cf8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008136:	4805      	ldr	r0, [pc, #20]	@ (800814c <CDC_Transmit_FS+0x48>)
 8008138:	f7fe fe0a 	bl	8006d50 <USBD_CDC_TransmitPacket>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	200002cc 	.word	0x200002cc

08008150 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2212      	movs	r2, #18
 8008160:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008162:	4b03      	ldr	r3, [pc, #12]	@ (8008170 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000148 	.word	0x20000148

08008174 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2204      	movs	r2, #4
 8008184:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008186:	4b03      	ldr	r3, [pc, #12]	@ (8008194 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000015c 	.word	0x2000015c

08008198 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	4907      	ldr	r1, [pc, #28]	@ (80081cc <USBD_FS_ProductStrDescriptor+0x34>)
 80081ae:	4808      	ldr	r0, [pc, #32]	@ (80081d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80081b0:	f7ff fde1 	bl	8007d76 <USBD_GetString>
 80081b4:	e004      	b.n	80081c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	4904      	ldr	r1, [pc, #16]	@ (80081cc <USBD_FS_ProductStrDescriptor+0x34>)
 80081ba:	4805      	ldr	r0, [pc, #20]	@ (80081d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80081bc:	f7ff fddb 	bl	8007d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081c0:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000d90 	.word	0x20000d90
 80081d0:	08009288 	.word	0x08009288

080081d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	4904      	ldr	r1, [pc, #16]	@ (80081f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081e4:	4804      	ldr	r0, [pc, #16]	@ (80081f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081e6:	f7ff fdc6 	bl	8007d76 <USBD_GetString>
  return USBD_StrDesc;
 80081ea:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	20000d90 	.word	0x20000d90
 80081f8:	080092a0 	.word	0x080092a0

080081fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	6039      	str	r1, [r7, #0]
 8008206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	221a      	movs	r2, #26
 800820c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800820e:	f000 f843 	bl	8008298 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008212:	4b02      	ldr	r3, [pc, #8]	@ (800821c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	20000160 	.word	0x20000160

08008220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d105      	bne.n	800823e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4907      	ldr	r1, [pc, #28]	@ (8008254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008236:	4808      	ldr	r0, [pc, #32]	@ (8008258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008238:	f7ff fd9d 	bl	8007d76 <USBD_GetString>
 800823c:	e004      	b.n	8008248 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	4904      	ldr	r1, [pc, #16]	@ (8008254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008242:	4805      	ldr	r0, [pc, #20]	@ (8008258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008244:	f7ff fd97 	bl	8007d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008248:	4b02      	ldr	r3, [pc, #8]	@ (8008254 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000d90 	.word	0x20000d90
 8008258:	080092b4 	.word	0x080092b4

0800825c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d105      	bne.n	800827a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4907      	ldr	r1, [pc, #28]	@ (8008290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008272:	4808      	ldr	r0, [pc, #32]	@ (8008294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008274:	f7ff fd7f 	bl	8007d76 <USBD_GetString>
 8008278:	e004      	b.n	8008284 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	4904      	ldr	r1, [pc, #16]	@ (8008290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800827e:	4805      	ldr	r0, [pc, #20]	@ (8008294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008280:	f7ff fd79 	bl	8007d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008284:	4b02      	ldr	r3, [pc, #8]	@ (8008290 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000d90 	.word	0x20000d90
 8008294:	080092c0 	.word	0x080092c0

08008298 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800829e:	4b0f      	ldr	r3, [pc, #60]	@ (80082dc <Get_SerialNum+0x44>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082a4:	4b0e      	ldr	r3, [pc, #56]	@ (80082e0 <Get_SerialNum+0x48>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082aa:	4b0e      	ldr	r3, [pc, #56]	@ (80082e4 <Get_SerialNum+0x4c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4413      	add	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082be:	2208      	movs	r2, #8
 80082c0:	4909      	ldr	r1, [pc, #36]	@ (80082e8 <Get_SerialNum+0x50>)
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f814 	bl	80082f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082c8:	2204      	movs	r2, #4
 80082ca:	4908      	ldr	r1, [pc, #32]	@ (80082ec <Get_SerialNum+0x54>)
 80082cc:	68b8      	ldr	r0, [r7, #8]
 80082ce:	f000 f80f 	bl	80082f0 <IntToUnicode>
  }
}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	1ffff7e8 	.word	0x1ffff7e8
 80082e0:	1ffff7ec 	.word	0x1ffff7ec
 80082e4:	1ffff7f0 	.word	0x1ffff7f0
 80082e8:	20000162 	.word	0x20000162
 80082ec:	20000172 	.word	0x20000172

080082f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4613      	mov	r3, r2
 80082fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008302:	2300      	movs	r3, #0
 8008304:	75fb      	strb	r3, [r7, #23]
 8008306:	e027      	b.n	8008358 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	0f1b      	lsrs	r3, r3, #28
 800830c:	2b09      	cmp	r3, #9
 800830e:	d80b      	bhi.n	8008328 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	0f1b      	lsrs	r3, r3, #28
 8008314:	b2da      	uxtb	r2, r3
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4619      	mov	r1, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	440b      	add	r3, r1
 8008320:	3230      	adds	r2, #48	@ 0x30
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	e00a      	b.n	800833e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	0f1b      	lsrs	r3, r3, #28
 800832c:	b2da      	uxtb	r2, r3
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	4619      	mov	r1, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	440b      	add	r3, r1
 8008338:	3237      	adds	r2, #55	@ 0x37
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	3301      	adds	r3, #1
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4413      	add	r3, r2
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	3301      	adds	r3, #1
 8008356:	75fb      	strb	r3, [r7, #23]
 8008358:	7dfa      	ldrb	r2, [r7, #23]
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	429a      	cmp	r2, r3
 800835e:	d3d3      	bcc.n	8008308 <IntToUnicode+0x18>
  }
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a0d      	ldr	r2, [pc, #52]	@ (80083b0 <HAL_PCD_MspInit+0x44>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d113      	bne.n	80083a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800837e:	4b0d      	ldr	r3, [pc, #52]	@ (80083b4 <HAL_PCD_MspInit+0x48>)
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	4a0c      	ldr	r2, [pc, #48]	@ (80083b4 <HAL_PCD_MspInit+0x48>)
 8008384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008388:	61d3      	str	r3, [r2, #28]
 800838a:	4b0a      	ldr	r3, [pc, #40]	@ (80083b4 <HAL_PCD_MspInit+0x48>)
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008396:	2200      	movs	r2, #0
 8008398:	2100      	movs	r1, #0
 800839a:	2014      	movs	r0, #20
 800839c:	f7f8 fc59 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80083a0:	2014      	movs	r0, #20
 80083a2:	f7f8 fc72 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	40005c00 	.word	0x40005c00
 80083b4:	40021000 	.word	0x40021000

080083b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80083cc:	4619      	mov	r1, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	f7fe fda3 	bl	8006f1a <USBD_LL_SetupStage>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	440b      	add	r3, r1
 80083fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	4619      	mov	r1, r3
 8008406:	f7fe fdd5 	bl	8006fb4 <USBD_LL_DataOutStage>
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	440b      	add	r3, r1
 8008432:	3324      	adds	r3, #36	@ 0x24
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	4619      	mov	r1, r3
 800843a:	f7fe fe2c 	bl	8007096 <USBD_LL_DataInStage>
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe ff3c 	bl	80072d2 <USBD_LL_SOF>
}
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800846a:	2301      	movs	r3, #1
 800846c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	799b      	ldrb	r3, [r3, #6]
 8008472:	2b02      	cmp	r3, #2
 8008474:	d001      	beq.n	800847a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008476:	f7f8 f891 	bl	800059c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008480:	7bfa      	ldrb	r2, [r7, #15]
 8008482:	4611      	mov	r1, r2
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe feec 	bl	8007262 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe fea5 	bl	80071e0 <USBD_LL_Reset>
}
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fee6 	bl	8007280 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	7a9b      	ldrb	r3, [r3, #10]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084bc:	4b04      	ldr	r3, [pc, #16]	@ (80084d0 <HAL_PCD_SuspendCallback+0x30>)
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	4a03      	ldr	r2, [pc, #12]	@ (80084d0 <HAL_PCD_SuspendCallback+0x30>)
 80084c2:	f043 0306 	orr.w	r3, r3, #6
 80084c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	e000ed00 	.word	0xe000ed00

080084d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fee0 	bl	80072a8 <USBD_LL_Resume>
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084f8:	4a28      	ldr	r2, [pc, #160]	@ (800859c <USBD_LL_Init+0xac>)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a26      	ldr	r2, [pc, #152]	@ (800859c <USBD_LL_Init+0xac>)
 8008504:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008508:	4b24      	ldr	r3, [pc, #144]	@ (800859c <USBD_LL_Init+0xac>)
 800850a:	4a25      	ldr	r2, [pc, #148]	@ (80085a0 <USBD_LL_Init+0xb0>)
 800850c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800850e:	4b23      	ldr	r3, [pc, #140]	@ (800859c <USBD_LL_Init+0xac>)
 8008510:	2208      	movs	r2, #8
 8008512:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008514:	4b21      	ldr	r3, [pc, #132]	@ (800859c <USBD_LL_Init+0xac>)
 8008516:	2202      	movs	r2, #2
 8008518:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800851a:	4b20      	ldr	r3, [pc, #128]	@ (800859c <USBD_LL_Init+0xac>)
 800851c:	2200      	movs	r2, #0
 800851e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008520:	4b1e      	ldr	r3, [pc, #120]	@ (800859c <USBD_LL_Init+0xac>)
 8008522:	2200      	movs	r2, #0
 8008524:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008526:	4b1d      	ldr	r3, [pc, #116]	@ (800859c <USBD_LL_Init+0xac>)
 8008528:	2200      	movs	r2, #0
 800852a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800852c:	481b      	ldr	r0, [pc, #108]	@ (800859c <USBD_LL_Init+0xac>)
 800852e:	f7f8 fd7c 	bl	800102a <HAL_PCD_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008538:	f7f8 f830 	bl	800059c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008542:	2318      	movs	r3, #24
 8008544:	2200      	movs	r2, #0
 8008546:	2100      	movs	r1, #0
 8008548:	f7fa fa8d 	bl	8002a66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008552:	2358      	movs	r3, #88	@ 0x58
 8008554:	2200      	movs	r2, #0
 8008556:	2180      	movs	r1, #128	@ 0x80
 8008558:	f7fa fa85 	bl	8002a66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008562:	23c0      	movs	r3, #192	@ 0xc0
 8008564:	2200      	movs	r2, #0
 8008566:	2181      	movs	r1, #129	@ 0x81
 8008568:	f7fa fa7d 	bl	8002a66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008572:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008576:	2200      	movs	r2, #0
 8008578:	2101      	movs	r1, #1
 800857a:	f7fa fa74 	bl	8002a66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008588:	2200      	movs	r2, #0
 800858a:	2182      	movs	r1, #130	@ 0x82
 800858c:	f7fa fa6b 	bl	8002a66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000f90 	.word	0x20000f90
 80085a0:	40005c00 	.word	0x40005c00

080085a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7f8 fe2b 	bl	8001216 <HAL_PCD_Start>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 f94e 	bl	8008868 <USBD_Get_USB_Status>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	4608      	mov	r0, r1
 80085e4:	4611      	mov	r1, r2
 80085e6:	461a      	mov	r2, r3
 80085e8:	4603      	mov	r3, r0
 80085ea:	70fb      	strb	r3, [r7, #3]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70bb      	strb	r3, [r7, #2]
 80085f0:	4613      	mov	r3, r2
 80085f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008602:	78bb      	ldrb	r3, [r7, #2]
 8008604:	883a      	ldrh	r2, [r7, #0]
 8008606:	78f9      	ldrb	r1, [r7, #3]
 8008608:	f7f8 ff7f 	bl	800150a <HAL_PCD_EP_Open>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f928 	bl	8008868 <USBD_Get_USB_Status>
 8008618:	4603      	mov	r3, r0
 800861a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861c:	7bbb      	ldrb	r3, [r7, #14]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f7f8 ffbd 	bl	80015c4 <HAL_PCD_EP_Close>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f909 	bl	8008868 <USBD_Get_USB_Status>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865a:	7bbb      	ldrb	r3, [r7, #14]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7f9 f865 	bl	8001752 <HAL_PCD_EP_SetStall>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f8ea 	bl	8008868 <USBD_Get_USB_Status>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008698:	7bbb      	ldrb	r3, [r7, #14]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	4611      	mov	r1, r2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7f9 f8a6 	bl	8001812 <HAL_PCD_EP_ClrStall>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 f8cb 	bl	8008868 <USBD_Get_USB_Status>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da0b      	bge.n	8008714 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	440b      	add	r3, r1
 800870e:	3312      	adds	r3, #18
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	e00b      	b.n	800872c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	440b      	add	r3, r1
 8008726:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800872a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr

08008736 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f7f8 feb4 	bl	80014c2 <HAL_PCD_SetAddress>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f881 	bl	8008868 <USBD_Get_USB_Status>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876a:	7bbb      	ldrb	r3, [r7, #14]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	607a      	str	r2, [r7, #4]
 800877e:	461a      	mov	r2, r3
 8008780:	460b      	mov	r3, r1
 8008782:	72fb      	strb	r3, [r7, #11]
 8008784:	4613      	mov	r3, r2
 8008786:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008796:	893b      	ldrh	r3, [r7, #8]
 8008798:	7af9      	ldrb	r1, [r7, #11]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	f7f8 ffa2 	bl	80016e4 <HAL_PCD_EP_Transmit>
 80087a0:	4603      	mov	r3, r0
 80087a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 f85e 	bl	8008868 <USBD_Get_USB_Status>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b086      	sub	sp, #24
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	461a      	mov	r2, r3
 80087c6:	460b      	mov	r3, r1
 80087c8:	72fb      	strb	r3, [r7, #11]
 80087ca:	4613      	mov	r3, r2
 80087cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087dc:	893b      	ldrh	r3, [r7, #8]
 80087de:	7af9      	ldrb	r1, [r7, #11]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	f7f8 ff37 	bl	8001654 <HAL_PCD_EP_Receive>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f83b 	bl	8008868 <USBD_Get_USB_Status>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f7f8 ff4d 	bl	80016b6 <HAL_PCD_EP_GetRxCount>
 800881c:	4603      	mov	r3, r0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008830:	4b02      	ldr	r3, [pc, #8]	@ (800883c <USBD_static_malloc+0x14>)
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr
 800883c:	20001268 	.word	0x20001268

08008840 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr

08008852 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	bc80      	pop	{r7}
 8008866:	4770      	bx	lr

08008868 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	2b03      	cmp	r3, #3
 800887a:	d817      	bhi.n	80088ac <USBD_Get_USB_Status+0x44>
 800887c:	a201      	add	r2, pc, #4	@ (adr r2, 8008884 <USBD_Get_USB_Status+0x1c>)
 800887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008882:	bf00      	nop
 8008884:	08008895 	.word	0x08008895
 8008888:	0800889b 	.word	0x0800889b
 800888c:	080088a1 	.word	0x080088a1
 8008890:	080088a7 	.word	0x080088a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
    break;
 8008898:	e00b      	b.n	80088b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800889a:	2302      	movs	r3, #2
 800889c:	73fb      	strb	r3, [r7, #15]
    break;
 800889e:	e008      	b.n	80088b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
    break;
 80088a4:	e005      	b.n	80088b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088a6:	2302      	movs	r3, #2
 80088a8:	73fb      	strb	r3, [r7, #15]
    break;
 80088aa:	e002      	b.n	80088b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088ac:	2302      	movs	r3, #2
 80088ae:	73fb      	strb	r3, [r7, #15]
    break;
 80088b0:	bf00      	nop
  }
  return usb_status;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc80      	pop	{r7}
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop

080088c0 <siprintf>:
 80088c0:	b40e      	push	{r1, r2, r3}
 80088c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80088c6:	b510      	push	{r4, lr}
 80088c8:	2400      	movs	r4, #0
 80088ca:	b09d      	sub	sp, #116	@ 0x74
 80088cc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80088ce:	9002      	str	r0, [sp, #8]
 80088d0:	9006      	str	r0, [sp, #24]
 80088d2:	9107      	str	r1, [sp, #28]
 80088d4:	9104      	str	r1, [sp, #16]
 80088d6:	4809      	ldr	r0, [pc, #36]	@ (80088fc <siprintf+0x3c>)
 80088d8:	4909      	ldr	r1, [pc, #36]	@ (8008900 <siprintf+0x40>)
 80088da:	f853 2b04 	ldr.w	r2, [r3], #4
 80088de:	9105      	str	r1, [sp, #20]
 80088e0:	6800      	ldr	r0, [r0, #0]
 80088e2:	a902      	add	r1, sp, #8
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80088e8:	f000 f992 	bl	8008c10 <_svfiprintf_r>
 80088ec:	9b02      	ldr	r3, [sp, #8]
 80088ee:	701c      	strb	r4, [r3, #0]
 80088f0:	b01d      	add	sp, #116	@ 0x74
 80088f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f6:	b003      	add	sp, #12
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	2000017c 	.word	0x2000017c
 8008900:	ffff0208 	.word	0xffff0208

08008904 <memset>:
 8008904:	4603      	mov	r3, r0
 8008906:	4402      	add	r2, r0
 8008908:	4293      	cmp	r3, r2
 800890a:	d100      	bne.n	800890e <memset+0xa>
 800890c:	4770      	bx	lr
 800890e:	f803 1b01 	strb.w	r1, [r3], #1
 8008912:	e7f9      	b.n	8008908 <memset+0x4>

08008914 <__errno>:
 8008914:	4b01      	ldr	r3, [pc, #4]	@ (800891c <__errno+0x8>)
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	2000017c 	.word	0x2000017c

08008920 <__libc_init_array>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	2600      	movs	r6, #0
 8008924:	4d0c      	ldr	r5, [pc, #48]	@ (8008958 <__libc_init_array+0x38>)
 8008926:	4c0d      	ldr	r4, [pc, #52]	@ (800895c <__libc_init_array+0x3c>)
 8008928:	1b64      	subs	r4, r4, r5
 800892a:	10a4      	asrs	r4, r4, #2
 800892c:	42a6      	cmp	r6, r4
 800892e:	d109      	bne.n	8008944 <__libc_init_array+0x24>
 8008930:	f000 fc76 	bl	8009220 <_init>
 8008934:	2600      	movs	r6, #0
 8008936:	4d0a      	ldr	r5, [pc, #40]	@ (8008960 <__libc_init_array+0x40>)
 8008938:	4c0a      	ldr	r4, [pc, #40]	@ (8008964 <__libc_init_array+0x44>)
 800893a:	1b64      	subs	r4, r4, r5
 800893c:	10a4      	asrs	r4, r4, #2
 800893e:	42a6      	cmp	r6, r4
 8008940:	d105      	bne.n	800894e <__libc_init_array+0x2e>
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	f855 3b04 	ldr.w	r3, [r5], #4
 8008948:	4798      	blx	r3
 800894a:	3601      	adds	r6, #1
 800894c:	e7ee      	b.n	800892c <__libc_init_array+0xc>
 800894e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008952:	4798      	blx	r3
 8008954:	3601      	adds	r6, #1
 8008956:	e7f2      	b.n	800893e <__libc_init_array+0x1e>
 8008958:	08009330 	.word	0x08009330
 800895c:	08009330 	.word	0x08009330
 8008960:	08009330 	.word	0x08009330
 8008964:	08009334 	.word	0x08009334

08008968 <__retarget_lock_acquire_recursive>:
 8008968:	4770      	bx	lr

0800896a <__retarget_lock_release_recursive>:
 800896a:	4770      	bx	lr

0800896c <_free_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4605      	mov	r5, r0
 8008970:	2900      	cmp	r1, #0
 8008972:	d040      	beq.n	80089f6 <_free_r+0x8a>
 8008974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008978:	1f0c      	subs	r4, r1, #4
 800897a:	2b00      	cmp	r3, #0
 800897c:	bfb8      	it	lt
 800897e:	18e4      	addlt	r4, r4, r3
 8008980:	f000 f8de 	bl	8008b40 <__malloc_lock>
 8008984:	4a1c      	ldr	r2, [pc, #112]	@ (80089f8 <_free_r+0x8c>)
 8008986:	6813      	ldr	r3, [r2, #0]
 8008988:	b933      	cbnz	r3, 8008998 <_free_r+0x2c>
 800898a:	6063      	str	r3, [r4, #4]
 800898c:	6014      	str	r4, [r2, #0]
 800898e:	4628      	mov	r0, r5
 8008990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008994:	f000 b8da 	b.w	8008b4c <__malloc_unlock>
 8008998:	42a3      	cmp	r3, r4
 800899a:	d908      	bls.n	80089ae <_free_r+0x42>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	1821      	adds	r1, r4, r0
 80089a0:	428b      	cmp	r3, r1
 80089a2:	bf01      	itttt	eq
 80089a4:	6819      	ldreq	r1, [r3, #0]
 80089a6:	685b      	ldreq	r3, [r3, #4]
 80089a8:	1809      	addeq	r1, r1, r0
 80089aa:	6021      	streq	r1, [r4, #0]
 80089ac:	e7ed      	b.n	800898a <_free_r+0x1e>
 80089ae:	461a      	mov	r2, r3
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	b10b      	cbz	r3, 80089b8 <_free_r+0x4c>
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	d9fa      	bls.n	80089ae <_free_r+0x42>
 80089b8:	6811      	ldr	r1, [r2, #0]
 80089ba:	1850      	adds	r0, r2, r1
 80089bc:	42a0      	cmp	r0, r4
 80089be:	d10b      	bne.n	80089d8 <_free_r+0x6c>
 80089c0:	6820      	ldr	r0, [r4, #0]
 80089c2:	4401      	add	r1, r0
 80089c4:	1850      	adds	r0, r2, r1
 80089c6:	4283      	cmp	r3, r0
 80089c8:	6011      	str	r1, [r2, #0]
 80089ca:	d1e0      	bne.n	800898e <_free_r+0x22>
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	4408      	add	r0, r1
 80089d2:	6010      	str	r0, [r2, #0]
 80089d4:	6053      	str	r3, [r2, #4]
 80089d6:	e7da      	b.n	800898e <_free_r+0x22>
 80089d8:	d902      	bls.n	80089e0 <_free_r+0x74>
 80089da:	230c      	movs	r3, #12
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	e7d6      	b.n	800898e <_free_r+0x22>
 80089e0:	6820      	ldr	r0, [r4, #0]
 80089e2:	1821      	adds	r1, r4, r0
 80089e4:	428b      	cmp	r3, r1
 80089e6:	bf01      	itttt	eq
 80089e8:	6819      	ldreq	r1, [r3, #0]
 80089ea:	685b      	ldreq	r3, [r3, #4]
 80089ec:	1809      	addeq	r1, r1, r0
 80089ee:	6021      	streq	r1, [r4, #0]
 80089f0:	6063      	str	r3, [r4, #4]
 80089f2:	6054      	str	r4, [r2, #4]
 80089f4:	e7cb      	b.n	800898e <_free_r+0x22>
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	200015cc 	.word	0x200015cc

080089fc <sbrk_aligned>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4e0f      	ldr	r6, [pc, #60]	@ (8008a3c <sbrk_aligned+0x40>)
 8008a00:	460c      	mov	r4, r1
 8008a02:	6831      	ldr	r1, [r6, #0]
 8008a04:	4605      	mov	r5, r0
 8008a06:	b911      	cbnz	r1, 8008a0e <sbrk_aligned+0x12>
 8008a08:	f000 fba8 	bl	800915c <_sbrk_r>
 8008a0c:	6030      	str	r0, [r6, #0]
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 fba3 	bl	800915c <_sbrk_r>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d103      	bne.n	8008a22 <sbrk_aligned+0x26>
 8008a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a1e:	4620      	mov	r0, r4
 8008a20:	bd70      	pop	{r4, r5, r6, pc}
 8008a22:	1cc4      	adds	r4, r0, #3
 8008a24:	f024 0403 	bic.w	r4, r4, #3
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d0f8      	beq.n	8008a1e <sbrk_aligned+0x22>
 8008a2c:	1a21      	subs	r1, r4, r0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 fb94 	bl	800915c <_sbrk_r>
 8008a34:	3001      	adds	r0, #1
 8008a36:	d1f2      	bne.n	8008a1e <sbrk_aligned+0x22>
 8008a38:	e7ef      	b.n	8008a1a <sbrk_aligned+0x1e>
 8008a3a:	bf00      	nop
 8008a3c:	200015c8 	.word	0x200015c8

08008a40 <_malloc_r>:
 8008a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a44:	1ccd      	adds	r5, r1, #3
 8008a46:	f025 0503 	bic.w	r5, r5, #3
 8008a4a:	3508      	adds	r5, #8
 8008a4c:	2d0c      	cmp	r5, #12
 8008a4e:	bf38      	it	cc
 8008a50:	250c      	movcc	r5, #12
 8008a52:	2d00      	cmp	r5, #0
 8008a54:	4606      	mov	r6, r0
 8008a56:	db01      	blt.n	8008a5c <_malloc_r+0x1c>
 8008a58:	42a9      	cmp	r1, r5
 8008a5a:	d904      	bls.n	8008a66 <_malloc_r+0x26>
 8008a5c:	230c      	movs	r3, #12
 8008a5e:	6033      	str	r3, [r6, #0]
 8008a60:	2000      	movs	r0, #0
 8008a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b3c <_malloc_r+0xfc>
 8008a6a:	f000 f869 	bl	8008b40 <__malloc_lock>
 8008a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a72:	461c      	mov	r4, r3
 8008a74:	bb44      	cbnz	r4, 8008ac8 <_malloc_r+0x88>
 8008a76:	4629      	mov	r1, r5
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff ffbf 	bl	80089fc <sbrk_aligned>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	4604      	mov	r4, r0
 8008a82:	d158      	bne.n	8008b36 <_malloc_r+0xf6>
 8008a84:	f8d8 4000 	ldr.w	r4, [r8]
 8008a88:	4627      	mov	r7, r4
 8008a8a:	2f00      	cmp	r7, #0
 8008a8c:	d143      	bne.n	8008b16 <_malloc_r+0xd6>
 8008a8e:	2c00      	cmp	r4, #0
 8008a90:	d04b      	beq.n	8008b2a <_malloc_r+0xea>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	4639      	mov	r1, r7
 8008a96:	4630      	mov	r0, r6
 8008a98:	eb04 0903 	add.w	r9, r4, r3
 8008a9c:	f000 fb5e 	bl	800915c <_sbrk_r>
 8008aa0:	4581      	cmp	r9, r0
 8008aa2:	d142      	bne.n	8008b2a <_malloc_r+0xea>
 8008aa4:	6821      	ldr	r1, [r4, #0]
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	1a6d      	subs	r5, r5, r1
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f7ff ffa6 	bl	80089fc <sbrk_aligned>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d03a      	beq.n	8008b2a <_malloc_r+0xea>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	442b      	add	r3, r5
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	f8d8 3000 	ldr.w	r3, [r8]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	bb62      	cbnz	r2, 8008b1c <_malloc_r+0xdc>
 8008ac2:	f8c8 7000 	str.w	r7, [r8]
 8008ac6:	e00f      	b.n	8008ae8 <_malloc_r+0xa8>
 8008ac8:	6822      	ldr	r2, [r4, #0]
 8008aca:	1b52      	subs	r2, r2, r5
 8008acc:	d420      	bmi.n	8008b10 <_malloc_r+0xd0>
 8008ace:	2a0b      	cmp	r2, #11
 8008ad0:	d917      	bls.n	8008b02 <_malloc_r+0xc2>
 8008ad2:	1961      	adds	r1, r4, r5
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	6025      	str	r5, [r4, #0]
 8008ad8:	bf18      	it	ne
 8008ada:	6059      	strne	r1, [r3, #4]
 8008adc:	6863      	ldr	r3, [r4, #4]
 8008ade:	bf08      	it	eq
 8008ae0:	f8c8 1000 	streq.w	r1, [r8]
 8008ae4:	5162      	str	r2, [r4, r5]
 8008ae6:	604b      	str	r3, [r1, #4]
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 f82f 	bl	8008b4c <__malloc_unlock>
 8008aee:	f104 000b 	add.w	r0, r4, #11
 8008af2:	1d23      	adds	r3, r4, #4
 8008af4:	f020 0007 	bic.w	r0, r0, #7
 8008af8:	1ac2      	subs	r2, r0, r3
 8008afa:	bf1c      	itt	ne
 8008afc:	1a1b      	subne	r3, r3, r0
 8008afe:	50a3      	strne	r3, [r4, r2]
 8008b00:	e7af      	b.n	8008a62 <_malloc_r+0x22>
 8008b02:	6862      	ldr	r2, [r4, #4]
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	bf0c      	ite	eq
 8008b08:	f8c8 2000 	streq.w	r2, [r8]
 8008b0c:	605a      	strne	r2, [r3, #4]
 8008b0e:	e7eb      	b.n	8008ae8 <_malloc_r+0xa8>
 8008b10:	4623      	mov	r3, r4
 8008b12:	6864      	ldr	r4, [r4, #4]
 8008b14:	e7ae      	b.n	8008a74 <_malloc_r+0x34>
 8008b16:	463c      	mov	r4, r7
 8008b18:	687f      	ldr	r7, [r7, #4]
 8008b1a:	e7b6      	b.n	8008a8a <_malloc_r+0x4a>
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	d1fb      	bne.n	8008b1c <_malloc_r+0xdc>
 8008b24:	2300      	movs	r3, #0
 8008b26:	6053      	str	r3, [r2, #4]
 8008b28:	e7de      	b.n	8008ae8 <_malloc_r+0xa8>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	6033      	str	r3, [r6, #0]
 8008b30:	f000 f80c 	bl	8008b4c <__malloc_unlock>
 8008b34:	e794      	b.n	8008a60 <_malloc_r+0x20>
 8008b36:	6005      	str	r5, [r0, #0]
 8008b38:	e7d6      	b.n	8008ae8 <_malloc_r+0xa8>
 8008b3a:	bf00      	nop
 8008b3c:	200015cc 	.word	0x200015cc

08008b40 <__malloc_lock>:
 8008b40:	4801      	ldr	r0, [pc, #4]	@ (8008b48 <__malloc_lock+0x8>)
 8008b42:	f7ff bf11 	b.w	8008968 <__retarget_lock_acquire_recursive>
 8008b46:	bf00      	nop
 8008b48:	200015c4 	.word	0x200015c4

08008b4c <__malloc_unlock>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	@ (8008b54 <__malloc_unlock+0x8>)
 8008b4e:	f7ff bf0c 	b.w	800896a <__retarget_lock_release_recursive>
 8008b52:	bf00      	nop
 8008b54:	200015c4 	.word	0x200015c4

08008b58 <__ssputs_r>:
 8008b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5c:	461f      	mov	r7, r3
 8008b5e:	688e      	ldr	r6, [r1, #8]
 8008b60:	4682      	mov	sl, r0
 8008b62:	42be      	cmp	r6, r7
 8008b64:	460c      	mov	r4, r1
 8008b66:	4690      	mov	r8, r2
 8008b68:	680b      	ldr	r3, [r1, #0]
 8008b6a:	d82d      	bhi.n	8008bc8 <__ssputs_r+0x70>
 8008b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b74:	d026      	beq.n	8008bc4 <__ssputs_r+0x6c>
 8008b76:	6965      	ldr	r5, [r4, #20]
 8008b78:	6909      	ldr	r1, [r1, #16]
 8008b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b7e:	eba3 0901 	sub.w	r9, r3, r1
 8008b82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b86:	1c7b      	adds	r3, r7, #1
 8008b88:	444b      	add	r3, r9
 8008b8a:	106d      	asrs	r5, r5, #1
 8008b8c:	429d      	cmp	r5, r3
 8008b8e:	bf38      	it	cc
 8008b90:	461d      	movcc	r5, r3
 8008b92:	0553      	lsls	r3, r2, #21
 8008b94:	d527      	bpl.n	8008be6 <__ssputs_r+0x8e>
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7ff ff52 	bl	8008a40 <_malloc_r>
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	b360      	cbz	r0, 8008bfa <__ssputs_r+0xa2>
 8008ba0:	464a      	mov	r2, r9
 8008ba2:	6921      	ldr	r1, [r4, #16]
 8008ba4:	f000 faf8 	bl	8009198 <memcpy>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	6126      	str	r6, [r4, #16]
 8008bb6:	444e      	add	r6, r9
 8008bb8:	6026      	str	r6, [r4, #0]
 8008bba:	463e      	mov	r6, r7
 8008bbc:	6165      	str	r5, [r4, #20]
 8008bbe:	eba5 0509 	sub.w	r5, r5, r9
 8008bc2:	60a5      	str	r5, [r4, #8]
 8008bc4:	42be      	cmp	r6, r7
 8008bc6:	d900      	bls.n	8008bca <__ssputs_r+0x72>
 8008bc8:	463e      	mov	r6, r7
 8008bca:	4632      	mov	r2, r6
 8008bcc:	4641      	mov	r1, r8
 8008bce:	6820      	ldr	r0, [r4, #0]
 8008bd0:	f000 faaa 	bl	8009128 <memmove>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	1b9b      	subs	r3, r3, r6
 8008bda:	60a3      	str	r3, [r4, #8]
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	4433      	add	r3, r6
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	462a      	mov	r2, r5
 8008be8:	f000 fae4 	bl	80091b4 <_realloc_r>
 8008bec:	4606      	mov	r6, r0
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d1e0      	bne.n	8008bb4 <__ssputs_r+0x5c>
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	6921      	ldr	r1, [r4, #16]
 8008bf6:	f7ff feb9 	bl	800896c <_free_r>
 8008bfa:	230c      	movs	r3, #12
 8008bfc:	f8ca 3000 	str.w	r3, [sl]
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f04f 30ff 	mov.w	r0, #4294967295
 8008c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	e7e9      	b.n	8008be2 <__ssputs_r+0x8a>
	...

08008c10 <_svfiprintf_r>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	4698      	mov	r8, r3
 8008c16:	898b      	ldrh	r3, [r1, #12]
 8008c18:	4607      	mov	r7, r0
 8008c1a:	061b      	lsls	r3, r3, #24
 8008c1c:	460d      	mov	r5, r1
 8008c1e:	4614      	mov	r4, r2
 8008c20:	b09d      	sub	sp, #116	@ 0x74
 8008c22:	d510      	bpl.n	8008c46 <_svfiprintf_r+0x36>
 8008c24:	690b      	ldr	r3, [r1, #16]
 8008c26:	b973      	cbnz	r3, 8008c46 <_svfiprintf_r+0x36>
 8008c28:	2140      	movs	r1, #64	@ 0x40
 8008c2a:	f7ff ff09 	bl	8008a40 <_malloc_r>
 8008c2e:	6028      	str	r0, [r5, #0]
 8008c30:	6128      	str	r0, [r5, #16]
 8008c32:	b930      	cbnz	r0, 8008c42 <_svfiprintf_r+0x32>
 8008c34:	230c      	movs	r3, #12
 8008c36:	603b      	str	r3, [r7, #0]
 8008c38:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3c:	b01d      	add	sp, #116	@ 0x74
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	2340      	movs	r3, #64	@ 0x40
 8008c44:	616b      	str	r3, [r5, #20]
 8008c46:	2300      	movs	r3, #0
 8008c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c4a:	2320      	movs	r3, #32
 8008c4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c50:	2330      	movs	r3, #48	@ 0x30
 8008c52:	f04f 0901 	mov.w	r9, #1
 8008c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008df4 <_svfiprintf_r+0x1e4>
 8008c5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c62:	4623      	mov	r3, r4
 8008c64:	469a      	mov	sl, r3
 8008c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c6a:	b10a      	cbz	r2, 8008c70 <_svfiprintf_r+0x60>
 8008c6c:	2a25      	cmp	r2, #37	@ 0x25
 8008c6e:	d1f9      	bne.n	8008c64 <_svfiprintf_r+0x54>
 8008c70:	ebba 0b04 	subs.w	fp, sl, r4
 8008c74:	d00b      	beq.n	8008c8e <_svfiprintf_r+0x7e>
 8008c76:	465b      	mov	r3, fp
 8008c78:	4622      	mov	r2, r4
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff ff6b 	bl	8008b58 <__ssputs_r>
 8008c82:	3001      	adds	r0, #1
 8008c84:	f000 80a7 	beq.w	8008dd6 <_svfiprintf_r+0x1c6>
 8008c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c8a:	445a      	add	r2, fp
 8008c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 809f 	beq.w	8008dd6 <_svfiprintf_r+0x1c6>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ca2:	f10a 0a01 	add.w	sl, sl, #1
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	9307      	str	r3, [sp, #28]
 8008caa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cb0:	4654      	mov	r4, sl
 8008cb2:	2205      	movs	r2, #5
 8008cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb8:	484e      	ldr	r0, [pc, #312]	@ (8008df4 <_svfiprintf_r+0x1e4>)
 8008cba:	f000 fa5f 	bl	800917c <memchr>
 8008cbe:	9a04      	ldr	r2, [sp, #16]
 8008cc0:	b9d8      	cbnz	r0, 8008cfa <_svfiprintf_r+0xea>
 8008cc2:	06d0      	lsls	r0, r2, #27
 8008cc4:	bf44      	itt	mi
 8008cc6:	2320      	movmi	r3, #32
 8008cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ccc:	0711      	lsls	r1, r2, #28
 8008cce:	bf44      	itt	mi
 8008cd0:	232b      	movmi	r3, #43	@ 0x2b
 8008cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cdc:	d015      	beq.n	8008d0a <_svfiprintf_r+0xfa>
 8008cde:	4654      	mov	r4, sl
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f04f 0c0a 	mov.w	ip, #10
 8008ce6:	9a07      	ldr	r2, [sp, #28]
 8008ce8:	4621      	mov	r1, r4
 8008cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cee:	3b30      	subs	r3, #48	@ 0x30
 8008cf0:	2b09      	cmp	r3, #9
 8008cf2:	d94b      	bls.n	8008d8c <_svfiprintf_r+0x17c>
 8008cf4:	b1b0      	cbz	r0, 8008d24 <_svfiprintf_r+0x114>
 8008cf6:	9207      	str	r2, [sp, #28]
 8008cf8:	e014      	b.n	8008d24 <_svfiprintf_r+0x114>
 8008cfa:	eba0 0308 	sub.w	r3, r0, r8
 8008cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8008d02:	4313      	orrs	r3, r2
 8008d04:	46a2      	mov	sl, r4
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	e7d2      	b.n	8008cb0 <_svfiprintf_r+0xa0>
 8008d0a:	9b03      	ldr	r3, [sp, #12]
 8008d0c:	1d19      	adds	r1, r3, #4
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	9103      	str	r1, [sp, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfbb      	ittet	lt
 8008d16:	425b      	neglt	r3, r3
 8008d18:	f042 0202 	orrlt.w	r2, r2, #2
 8008d1c:	9307      	strge	r3, [sp, #28]
 8008d1e:	9307      	strlt	r3, [sp, #28]
 8008d20:	bfb8      	it	lt
 8008d22:	9204      	strlt	r2, [sp, #16]
 8008d24:	7823      	ldrb	r3, [r4, #0]
 8008d26:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d28:	d10a      	bne.n	8008d40 <_svfiprintf_r+0x130>
 8008d2a:	7863      	ldrb	r3, [r4, #1]
 8008d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d2e:	d132      	bne.n	8008d96 <_svfiprintf_r+0x186>
 8008d30:	9b03      	ldr	r3, [sp, #12]
 8008d32:	3402      	adds	r4, #2
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	9203      	str	r2, [sp, #12]
 8008d3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d3e:	9305      	str	r3, [sp, #20]
 8008d40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008df8 <_svfiprintf_r+0x1e8>
 8008d44:	2203      	movs	r2, #3
 8008d46:	4650      	mov	r0, sl
 8008d48:	7821      	ldrb	r1, [r4, #0]
 8008d4a:	f000 fa17 	bl	800917c <memchr>
 8008d4e:	b138      	cbz	r0, 8008d60 <_svfiprintf_r+0x150>
 8008d50:	2240      	movs	r2, #64	@ 0x40
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	eba0 000a 	sub.w	r0, r0, sl
 8008d58:	4082      	lsls	r2, r0
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	3401      	adds	r4, #1
 8008d5e:	9304      	str	r3, [sp, #16]
 8008d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d64:	2206      	movs	r2, #6
 8008d66:	4825      	ldr	r0, [pc, #148]	@ (8008dfc <_svfiprintf_r+0x1ec>)
 8008d68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d6c:	f000 fa06 	bl	800917c <memchr>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d036      	beq.n	8008de2 <_svfiprintf_r+0x1d2>
 8008d74:	4b22      	ldr	r3, [pc, #136]	@ (8008e00 <_svfiprintf_r+0x1f0>)
 8008d76:	bb1b      	cbnz	r3, 8008dc0 <_svfiprintf_r+0x1b0>
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	3307      	adds	r3, #7
 8008d7c:	f023 0307 	bic.w	r3, r3, #7
 8008d80:	3308      	adds	r3, #8
 8008d82:	9303      	str	r3, [sp, #12]
 8008d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d86:	4433      	add	r3, r6
 8008d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d8a:	e76a      	b.n	8008c62 <_svfiprintf_r+0x52>
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	2001      	movs	r0, #1
 8008d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d94:	e7a8      	b.n	8008ce8 <_svfiprintf_r+0xd8>
 8008d96:	2300      	movs	r3, #0
 8008d98:	f04f 0c0a 	mov.w	ip, #10
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	3401      	adds	r4, #1
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	4620      	mov	r0, r4
 8008da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da8:	3a30      	subs	r2, #48	@ 0x30
 8008daa:	2a09      	cmp	r2, #9
 8008dac:	d903      	bls.n	8008db6 <_svfiprintf_r+0x1a6>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0c6      	beq.n	8008d40 <_svfiprintf_r+0x130>
 8008db2:	9105      	str	r1, [sp, #20]
 8008db4:	e7c4      	b.n	8008d40 <_svfiprintf_r+0x130>
 8008db6:	4604      	mov	r4, r0
 8008db8:	2301      	movs	r3, #1
 8008dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dbe:	e7f0      	b.n	8008da2 <_svfiprintf_r+0x192>
 8008dc0:	ab03      	add	r3, sp, #12
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	462a      	mov	r2, r5
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e04 <_svfiprintf_r+0x1f4>)
 8008dca:	a904      	add	r1, sp, #16
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	1c42      	adds	r2, r0, #1
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	d1d6      	bne.n	8008d84 <_svfiprintf_r+0x174>
 8008dd6:	89ab      	ldrh	r3, [r5, #12]
 8008dd8:	065b      	lsls	r3, r3, #25
 8008dda:	f53f af2d 	bmi.w	8008c38 <_svfiprintf_r+0x28>
 8008dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008de0:	e72c      	b.n	8008c3c <_svfiprintf_r+0x2c>
 8008de2:	ab03      	add	r3, sp, #12
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	462a      	mov	r2, r5
 8008de8:	4638      	mov	r0, r7
 8008dea:	4b06      	ldr	r3, [pc, #24]	@ (8008e04 <_svfiprintf_r+0x1f4>)
 8008dec:	a904      	add	r1, sp, #16
 8008dee:	f000 f87d 	bl	8008eec <_printf_i>
 8008df2:	e7ed      	b.n	8008dd0 <_svfiprintf_r+0x1c0>
 8008df4:	080092f2 	.word	0x080092f2
 8008df8:	080092f8 	.word	0x080092f8
 8008dfc:	080092fc 	.word	0x080092fc
 8008e00:	00000000 	.word	0x00000000
 8008e04:	08008b59 	.word	0x08008b59

08008e08 <_printf_common>:
 8008e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e0c:	4616      	mov	r6, r2
 8008e0e:	4698      	mov	r8, r3
 8008e10:	688a      	ldr	r2, [r1, #8]
 8008e12:	690b      	ldr	r3, [r1, #16]
 8008e14:	4607      	mov	r7, r0
 8008e16:	4293      	cmp	r3, r2
 8008e18:	bfb8      	it	lt
 8008e1a:	4613      	movlt	r3, r2
 8008e1c:	6033      	str	r3, [r6, #0]
 8008e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e22:	460c      	mov	r4, r1
 8008e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e28:	b10a      	cbz	r2, 8008e2e <_printf_common+0x26>
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	6033      	str	r3, [r6, #0]
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	0699      	lsls	r1, r3, #26
 8008e32:	bf42      	ittt	mi
 8008e34:	6833      	ldrmi	r3, [r6, #0]
 8008e36:	3302      	addmi	r3, #2
 8008e38:	6033      	strmi	r3, [r6, #0]
 8008e3a:	6825      	ldr	r5, [r4, #0]
 8008e3c:	f015 0506 	ands.w	r5, r5, #6
 8008e40:	d106      	bne.n	8008e50 <_printf_common+0x48>
 8008e42:	f104 0a19 	add.w	sl, r4, #25
 8008e46:	68e3      	ldr	r3, [r4, #12]
 8008e48:	6832      	ldr	r2, [r6, #0]
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	42ab      	cmp	r3, r5
 8008e4e:	dc2b      	bgt.n	8008ea8 <_printf_common+0xa0>
 8008e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e54:	6822      	ldr	r2, [r4, #0]
 8008e56:	3b00      	subs	r3, #0
 8008e58:	bf18      	it	ne
 8008e5a:	2301      	movne	r3, #1
 8008e5c:	0692      	lsls	r2, r2, #26
 8008e5e:	d430      	bmi.n	8008ec2 <_printf_common+0xba>
 8008e60:	4641      	mov	r1, r8
 8008e62:	4638      	mov	r0, r7
 8008e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e68:	47c8      	blx	r9
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d023      	beq.n	8008eb6 <_printf_common+0xae>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	6922      	ldr	r2, [r4, #16]
 8008e72:	f003 0306 	and.w	r3, r3, #6
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	bf14      	ite	ne
 8008e7a:	2500      	movne	r5, #0
 8008e7c:	6833      	ldreq	r3, [r6, #0]
 8008e7e:	f04f 0600 	mov.w	r6, #0
 8008e82:	bf08      	it	eq
 8008e84:	68e5      	ldreq	r5, [r4, #12]
 8008e86:	f104 041a 	add.w	r4, r4, #26
 8008e8a:	bf08      	it	eq
 8008e8c:	1aed      	subeq	r5, r5, r3
 8008e8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008e92:	bf08      	it	eq
 8008e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	bfc4      	itt	gt
 8008e9c:	1a9b      	subgt	r3, r3, r2
 8008e9e:	18ed      	addgt	r5, r5, r3
 8008ea0:	42b5      	cmp	r5, r6
 8008ea2:	d11a      	bne.n	8008eda <_printf_common+0xd2>
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e008      	b.n	8008eba <_printf_common+0xb2>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	4652      	mov	r2, sl
 8008eac:	4641      	mov	r1, r8
 8008eae:	4638      	mov	r0, r7
 8008eb0:	47c8      	blx	r9
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d103      	bne.n	8008ebe <_printf_common+0xb6>
 8008eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebe:	3501      	adds	r5, #1
 8008ec0:	e7c1      	b.n	8008e46 <_printf_common+0x3e>
 8008ec2:	2030      	movs	r0, #48	@ 0x30
 8008ec4:	18e1      	adds	r1, r4, r3
 8008ec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ed0:	4422      	add	r2, r4
 8008ed2:	3302      	adds	r3, #2
 8008ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ed8:	e7c2      	b.n	8008e60 <_printf_common+0x58>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4622      	mov	r2, r4
 8008ede:	4641      	mov	r1, r8
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	47c8      	blx	r9
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d0e6      	beq.n	8008eb6 <_printf_common+0xae>
 8008ee8:	3601      	adds	r6, #1
 8008eea:	e7d9      	b.n	8008ea0 <_printf_common+0x98>

08008eec <_printf_i>:
 8008eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef0:	7e0f      	ldrb	r7, [r1, #24]
 8008ef2:	4691      	mov	r9, r2
 8008ef4:	2f78      	cmp	r7, #120	@ 0x78
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	469a      	mov	sl, r3
 8008efc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008efe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f02:	d807      	bhi.n	8008f14 <_printf_i+0x28>
 8008f04:	2f62      	cmp	r7, #98	@ 0x62
 8008f06:	d80a      	bhi.n	8008f1e <_printf_i+0x32>
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	f000 80d1 	beq.w	80090b0 <_printf_i+0x1c4>
 8008f0e:	2f58      	cmp	r7, #88	@ 0x58
 8008f10:	f000 80b8 	beq.w	8009084 <_printf_i+0x198>
 8008f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f1c:	e03a      	b.n	8008f94 <_printf_i+0xa8>
 8008f1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f22:	2b15      	cmp	r3, #21
 8008f24:	d8f6      	bhi.n	8008f14 <_printf_i+0x28>
 8008f26:	a101      	add	r1, pc, #4	@ (adr r1, 8008f2c <_printf_i+0x40>)
 8008f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f2c:	08008f85 	.word	0x08008f85
 8008f30:	08008f99 	.word	0x08008f99
 8008f34:	08008f15 	.word	0x08008f15
 8008f38:	08008f15 	.word	0x08008f15
 8008f3c:	08008f15 	.word	0x08008f15
 8008f40:	08008f15 	.word	0x08008f15
 8008f44:	08008f99 	.word	0x08008f99
 8008f48:	08008f15 	.word	0x08008f15
 8008f4c:	08008f15 	.word	0x08008f15
 8008f50:	08008f15 	.word	0x08008f15
 8008f54:	08008f15 	.word	0x08008f15
 8008f58:	08009097 	.word	0x08009097
 8008f5c:	08008fc3 	.word	0x08008fc3
 8008f60:	08009051 	.word	0x08009051
 8008f64:	08008f15 	.word	0x08008f15
 8008f68:	08008f15 	.word	0x08008f15
 8008f6c:	080090b9 	.word	0x080090b9
 8008f70:	08008f15 	.word	0x08008f15
 8008f74:	08008fc3 	.word	0x08008fc3
 8008f78:	08008f15 	.word	0x08008f15
 8008f7c:	08008f15 	.word	0x08008f15
 8008f80:	08009059 	.word	0x08009059
 8008f84:	6833      	ldr	r3, [r6, #0]
 8008f86:	1d1a      	adds	r2, r3, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6032      	str	r2, [r6, #0]
 8008f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f94:	2301      	movs	r3, #1
 8008f96:	e09c      	b.n	80090d2 <_printf_i+0x1e6>
 8008f98:	6833      	ldr	r3, [r6, #0]
 8008f9a:	6820      	ldr	r0, [r4, #0]
 8008f9c:	1d19      	adds	r1, r3, #4
 8008f9e:	6031      	str	r1, [r6, #0]
 8008fa0:	0606      	lsls	r6, r0, #24
 8008fa2:	d501      	bpl.n	8008fa8 <_printf_i+0xbc>
 8008fa4:	681d      	ldr	r5, [r3, #0]
 8008fa6:	e003      	b.n	8008fb0 <_printf_i+0xc4>
 8008fa8:	0645      	lsls	r5, r0, #25
 8008faa:	d5fb      	bpl.n	8008fa4 <_printf_i+0xb8>
 8008fac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	da03      	bge.n	8008fbc <_printf_i+0xd0>
 8008fb4:	232d      	movs	r3, #45	@ 0x2d
 8008fb6:	426d      	negs	r5, r5
 8008fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fbc:	230a      	movs	r3, #10
 8008fbe:	4858      	ldr	r0, [pc, #352]	@ (8009120 <_printf_i+0x234>)
 8008fc0:	e011      	b.n	8008fe6 <_printf_i+0xfa>
 8008fc2:	6821      	ldr	r1, [r4, #0]
 8008fc4:	6833      	ldr	r3, [r6, #0]
 8008fc6:	0608      	lsls	r0, r1, #24
 8008fc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fcc:	d402      	bmi.n	8008fd4 <_printf_i+0xe8>
 8008fce:	0649      	lsls	r1, r1, #25
 8008fd0:	bf48      	it	mi
 8008fd2:	b2ad      	uxthmi	r5, r5
 8008fd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fd6:	6033      	str	r3, [r6, #0]
 8008fd8:	bf14      	ite	ne
 8008fda:	230a      	movne	r3, #10
 8008fdc:	2308      	moveq	r3, #8
 8008fde:	4850      	ldr	r0, [pc, #320]	@ (8009120 <_printf_i+0x234>)
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fe6:	6866      	ldr	r6, [r4, #4]
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	60a6      	str	r6, [r4, #8]
 8008fec:	db05      	blt.n	8008ffa <_printf_i+0x10e>
 8008fee:	6821      	ldr	r1, [r4, #0]
 8008ff0:	432e      	orrs	r6, r5
 8008ff2:	f021 0104 	bic.w	r1, r1, #4
 8008ff6:	6021      	str	r1, [r4, #0]
 8008ff8:	d04b      	beq.n	8009092 <_printf_i+0x1a6>
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009000:	fb03 5711 	mls	r7, r3, r1, r5
 8009004:	5dc7      	ldrb	r7, [r0, r7]
 8009006:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800900a:	462f      	mov	r7, r5
 800900c:	42bb      	cmp	r3, r7
 800900e:	460d      	mov	r5, r1
 8009010:	d9f4      	bls.n	8008ffc <_printf_i+0x110>
 8009012:	2b08      	cmp	r3, #8
 8009014:	d10b      	bne.n	800902e <_printf_i+0x142>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	07df      	lsls	r7, r3, #31
 800901a:	d508      	bpl.n	800902e <_printf_i+0x142>
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	6861      	ldr	r1, [r4, #4]
 8009020:	4299      	cmp	r1, r3
 8009022:	bfde      	ittt	le
 8009024:	2330      	movle	r3, #48	@ 0x30
 8009026:	f806 3c01 	strble.w	r3, [r6, #-1]
 800902a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800902e:	1b92      	subs	r2, r2, r6
 8009030:	6122      	str	r2, [r4, #16]
 8009032:	464b      	mov	r3, r9
 8009034:	4621      	mov	r1, r4
 8009036:	4640      	mov	r0, r8
 8009038:	f8cd a000 	str.w	sl, [sp]
 800903c:	aa03      	add	r2, sp, #12
 800903e:	f7ff fee3 	bl	8008e08 <_printf_common>
 8009042:	3001      	adds	r0, #1
 8009044:	d14a      	bne.n	80090dc <_printf_i+0x1f0>
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	b004      	add	sp, #16
 800904c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	f043 0320 	orr.w	r3, r3, #32
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	2778      	movs	r7, #120	@ 0x78
 800905a:	4832      	ldr	r0, [pc, #200]	@ (8009124 <_printf_i+0x238>)
 800905c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	6831      	ldr	r1, [r6, #0]
 8009064:	061f      	lsls	r7, r3, #24
 8009066:	f851 5b04 	ldr.w	r5, [r1], #4
 800906a:	d402      	bmi.n	8009072 <_printf_i+0x186>
 800906c:	065f      	lsls	r7, r3, #25
 800906e:	bf48      	it	mi
 8009070:	b2ad      	uxthmi	r5, r5
 8009072:	6031      	str	r1, [r6, #0]
 8009074:	07d9      	lsls	r1, r3, #31
 8009076:	bf44      	itt	mi
 8009078:	f043 0320 	orrmi.w	r3, r3, #32
 800907c:	6023      	strmi	r3, [r4, #0]
 800907e:	b11d      	cbz	r5, 8009088 <_printf_i+0x19c>
 8009080:	2310      	movs	r3, #16
 8009082:	e7ad      	b.n	8008fe0 <_printf_i+0xf4>
 8009084:	4826      	ldr	r0, [pc, #152]	@ (8009120 <_printf_i+0x234>)
 8009086:	e7e9      	b.n	800905c <_printf_i+0x170>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	f023 0320 	bic.w	r3, r3, #32
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	e7f6      	b.n	8009080 <_printf_i+0x194>
 8009092:	4616      	mov	r6, r2
 8009094:	e7bd      	b.n	8009012 <_printf_i+0x126>
 8009096:	6833      	ldr	r3, [r6, #0]
 8009098:	6825      	ldr	r5, [r4, #0]
 800909a:	1d18      	adds	r0, r3, #4
 800909c:	6961      	ldr	r1, [r4, #20]
 800909e:	6030      	str	r0, [r6, #0]
 80090a0:	062e      	lsls	r6, r5, #24
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	d501      	bpl.n	80090aa <_printf_i+0x1be>
 80090a6:	6019      	str	r1, [r3, #0]
 80090a8:	e002      	b.n	80090b0 <_printf_i+0x1c4>
 80090aa:	0668      	lsls	r0, r5, #25
 80090ac:	d5fb      	bpl.n	80090a6 <_printf_i+0x1ba>
 80090ae:	8019      	strh	r1, [r3, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	4616      	mov	r6, r2
 80090b4:	6123      	str	r3, [r4, #16]
 80090b6:	e7bc      	b.n	8009032 <_printf_i+0x146>
 80090b8:	6833      	ldr	r3, [r6, #0]
 80090ba:	2100      	movs	r1, #0
 80090bc:	1d1a      	adds	r2, r3, #4
 80090be:	6032      	str	r2, [r6, #0]
 80090c0:	681e      	ldr	r6, [r3, #0]
 80090c2:	6862      	ldr	r2, [r4, #4]
 80090c4:	4630      	mov	r0, r6
 80090c6:	f000 f859 	bl	800917c <memchr>
 80090ca:	b108      	cbz	r0, 80090d0 <_printf_i+0x1e4>
 80090cc:	1b80      	subs	r0, r0, r6
 80090ce:	6060      	str	r0, [r4, #4]
 80090d0:	6863      	ldr	r3, [r4, #4]
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	2300      	movs	r3, #0
 80090d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090da:	e7aa      	b.n	8009032 <_printf_i+0x146>
 80090dc:	4632      	mov	r2, r6
 80090de:	4649      	mov	r1, r9
 80090e0:	4640      	mov	r0, r8
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	47d0      	blx	sl
 80090e6:	3001      	adds	r0, #1
 80090e8:	d0ad      	beq.n	8009046 <_printf_i+0x15a>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	079b      	lsls	r3, r3, #30
 80090ee:	d413      	bmi.n	8009118 <_printf_i+0x22c>
 80090f0:	68e0      	ldr	r0, [r4, #12]
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	4298      	cmp	r0, r3
 80090f6:	bfb8      	it	lt
 80090f8:	4618      	movlt	r0, r3
 80090fa:	e7a6      	b.n	800904a <_printf_i+0x15e>
 80090fc:	2301      	movs	r3, #1
 80090fe:	4632      	mov	r2, r6
 8009100:	4649      	mov	r1, r9
 8009102:	4640      	mov	r0, r8
 8009104:	47d0      	blx	sl
 8009106:	3001      	adds	r0, #1
 8009108:	d09d      	beq.n	8009046 <_printf_i+0x15a>
 800910a:	3501      	adds	r5, #1
 800910c:	68e3      	ldr	r3, [r4, #12]
 800910e:	9903      	ldr	r1, [sp, #12]
 8009110:	1a5b      	subs	r3, r3, r1
 8009112:	42ab      	cmp	r3, r5
 8009114:	dcf2      	bgt.n	80090fc <_printf_i+0x210>
 8009116:	e7eb      	b.n	80090f0 <_printf_i+0x204>
 8009118:	2500      	movs	r5, #0
 800911a:	f104 0619 	add.w	r6, r4, #25
 800911e:	e7f5      	b.n	800910c <_printf_i+0x220>
 8009120:	08009303 	.word	0x08009303
 8009124:	08009314 	.word	0x08009314

08009128 <memmove>:
 8009128:	4288      	cmp	r0, r1
 800912a:	b510      	push	{r4, lr}
 800912c:	eb01 0402 	add.w	r4, r1, r2
 8009130:	d902      	bls.n	8009138 <memmove+0x10>
 8009132:	4284      	cmp	r4, r0
 8009134:	4623      	mov	r3, r4
 8009136:	d807      	bhi.n	8009148 <memmove+0x20>
 8009138:	1e43      	subs	r3, r0, #1
 800913a:	42a1      	cmp	r1, r4
 800913c:	d008      	beq.n	8009150 <memmove+0x28>
 800913e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009142:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009146:	e7f8      	b.n	800913a <memmove+0x12>
 8009148:	4601      	mov	r1, r0
 800914a:	4402      	add	r2, r0
 800914c:	428a      	cmp	r2, r1
 800914e:	d100      	bne.n	8009152 <memmove+0x2a>
 8009150:	bd10      	pop	{r4, pc}
 8009152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800915a:	e7f7      	b.n	800914c <memmove+0x24>

0800915c <_sbrk_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	2300      	movs	r3, #0
 8009160:	4d05      	ldr	r5, [pc, #20]	@ (8009178 <_sbrk_r+0x1c>)
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	f7f7 fa90 	bl	800068c <_sbrk>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_sbrk_r+0x1a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_sbrk_r+0x1a>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	200015c0 	.word	0x200015c0

0800917c <memchr>:
 800917c:	4603      	mov	r3, r0
 800917e:	b510      	push	{r4, lr}
 8009180:	b2c9      	uxtb	r1, r1
 8009182:	4402      	add	r2, r0
 8009184:	4293      	cmp	r3, r2
 8009186:	4618      	mov	r0, r3
 8009188:	d101      	bne.n	800918e <memchr+0x12>
 800918a:	2000      	movs	r0, #0
 800918c:	e003      	b.n	8009196 <memchr+0x1a>
 800918e:	7804      	ldrb	r4, [r0, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	428c      	cmp	r4, r1
 8009194:	d1f6      	bne.n	8009184 <memchr+0x8>
 8009196:	bd10      	pop	{r4, pc}

08009198 <memcpy>:
 8009198:	440a      	add	r2, r1
 800919a:	4291      	cmp	r1, r2
 800919c:	f100 33ff 	add.w	r3, r0, #4294967295
 80091a0:	d100      	bne.n	80091a4 <memcpy+0xc>
 80091a2:	4770      	bx	lr
 80091a4:	b510      	push	{r4, lr}
 80091a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091aa:	4291      	cmp	r1, r2
 80091ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091b0:	d1f9      	bne.n	80091a6 <memcpy+0xe>
 80091b2:	bd10      	pop	{r4, pc}

080091b4 <_realloc_r>:
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	4607      	mov	r7, r0
 80091ba:	4614      	mov	r4, r2
 80091bc:	460d      	mov	r5, r1
 80091be:	b921      	cbnz	r1, 80091ca <_realloc_r+0x16>
 80091c0:	4611      	mov	r1, r2
 80091c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091c6:	f7ff bc3b 	b.w	8008a40 <_malloc_r>
 80091ca:	b92a      	cbnz	r2, 80091d8 <_realloc_r+0x24>
 80091cc:	f7ff fbce 	bl	800896c <_free_r>
 80091d0:	4625      	mov	r5, r4
 80091d2:	4628      	mov	r0, r5
 80091d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d8:	f000 f81a 	bl	8009210 <_malloc_usable_size_r>
 80091dc:	4284      	cmp	r4, r0
 80091de:	4606      	mov	r6, r0
 80091e0:	d802      	bhi.n	80091e8 <_realloc_r+0x34>
 80091e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091e6:	d8f4      	bhi.n	80091d2 <_realloc_r+0x1e>
 80091e8:	4621      	mov	r1, r4
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7ff fc28 	bl	8008a40 <_malloc_r>
 80091f0:	4680      	mov	r8, r0
 80091f2:	b908      	cbnz	r0, 80091f8 <_realloc_r+0x44>
 80091f4:	4645      	mov	r5, r8
 80091f6:	e7ec      	b.n	80091d2 <_realloc_r+0x1e>
 80091f8:	42b4      	cmp	r4, r6
 80091fa:	4622      	mov	r2, r4
 80091fc:	4629      	mov	r1, r5
 80091fe:	bf28      	it	cs
 8009200:	4632      	movcs	r2, r6
 8009202:	f7ff ffc9 	bl	8009198 <memcpy>
 8009206:	4629      	mov	r1, r5
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff fbaf 	bl	800896c <_free_r>
 800920e:	e7f1      	b.n	80091f4 <_realloc_r+0x40>

08009210 <_malloc_usable_size_r>:
 8009210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009214:	1f18      	subs	r0, r3, #4
 8009216:	2b00      	cmp	r3, #0
 8009218:	bfbc      	itt	lt
 800921a:	580b      	ldrlt	r3, [r1, r0]
 800921c:	18c0      	addlt	r0, r0, r3
 800921e:	4770      	bx	lr

08009220 <_init>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr

0800922c <_fini>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr
